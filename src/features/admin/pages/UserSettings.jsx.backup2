import React, { useState, useEffect } from 'react';
import {
  User,
  Bell,
  Shield,
  Palette,
  Globe,
  Key,
  Monitor,
  Moon,
  Sun,
  Save,
  Eye,
  EyeOff,
  Camera,
  Mail,
  Phone,
  MapPin,
  Calendar,
  CheckCircle,
  AlertTriangle,
  Info,
  X,
  Download,
  Upload,
  RefreshCw,
  Trash2,
  Copy,
  Check,
  Clock,
  Smartphone,
  Laptop,
  Tablet,
  Activity,
  Lock,
  Unlock,
  Edit3,
  Star,
  TrendingUp,
  BarChart3,
  Settings,
  Zap,
  Database,
  CreditCard,
  DollarSign,
  FileText,
  IdCard,
  Building,
  Receipt,
  Users,
  Gavel,
  FileCheck,
  FilePlus,
  FileX,
  Image,
  Paperclip,
  ExternalLink
} from 'lucide-react';

const UserSettings = () => {
  const [activeTab, setActiveTab] = useState('profile');
  const [showPassword, setShowPassword] = useState(false);
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [settings, setSettings] = useState({
    // Profile settings
    profile: {
      // Personal Identity Information (Required for FINRA/SEC compliance)
      firstName: 'Admin',
      middleName: '',
      lastName: 'User',
      legalName: 'Admin User', // Full legal name as appears on government ID
      dateOfBirth: '1990-01-15',
      placeOfBirth: 'New York, NY, USA',
      gender: 'prefer_not_to_say',
      maritalStatus: 'single',
      nationality: 'US',
      citizenship: ['US'], // Can hold multiple citizenships
      ssn: '', // Last 4 digits for verification
      taxId: '', // Tax identification number
      motherMaidenName: '', // Security question
      website: '',
      socialMedia: {
        linkedin: '',
        twitter: '',
        github: ''
      },
      
      // Additional profile fields
      occupation: 'Software Engineer',
      company: 'FractionaX Inc.',
      bio: '',
      timezone: 'America/New_York',
      
      // Emergency contact (single contact for simple UI)
      emergencyContact: {
        name: 'Jane Doe',
        relationship: 'spouse',
        phone: '+1 (555) 987-6543',
        email: 'jane.doe@email.com'
      },
      
      // Contact Information
      email: 'admin@fractionax.com',
      emailVerified: true,
      phone: '+1 (555) 123-4567',
      phoneVerified: false,
      alternatePhone: '',
      
      // Address Information (Primary Residence)
      address: {
        type: 'primary_residence',
        street: '123 Wall Street',
        street2: 'Suite 456',
        city: 'New York',
        state: 'NY',
        country: 'United States',
        postalCode: '10005',
        residencyStatus: 'permanent_resident', // permanent_resident, temporary_resident, citizen
        residenceDuration: '5_plus_years', // How long at current address
        previousAddresses: [] // Required if less than 2 years at current address
      },
      
      // Mailing Address (if different)
      mailingAddress: {
        sameAsPrimary: true,
        street: '',
        street2: '',
        city: '',
        state: '',
        country: '',
        postalCode: ''
      },
      
      // Employment Information (Required for income verification)
      employment: {
        status: 'employed', // employed, self_employed, unemployed, retired, student
        employer: 'FractionaX Inc.',
        jobTitle: 'Software Engineer',
        industry: 'technology',
        workAddress: {
          street: '456 Tech Plaza',
          city: 'New York',
          state: 'NY',
          country: 'United States',
          postalCode: '10001'
        },
        employmentDuration: '2_plus_years',
        supervisorName: 'John Smith',
        supervisorPhone: '+1 (555) 234-5678',
        annualIncome: 150000,
        incomeSource: 'salary', // salary, business, investments, retirement, other
        previousEmployment: [] // Required if less than 2 years at current job
      },
      
      // Financial Information (Required for securities trading)
      financialProfile: {
        netWorth: 500000,
        liquidNetWorth: 200000,
        annualIncome: 150000,
        incomeVerification: 'pending', // verified, pending, not_provided
        bankAccounts: [],
        creditScore: 750,
        bankruptcyHistory: false,
        investmentExperience: 'intermediate', // beginner, intermediate, advanced, professional
        riskTolerance: 'moderate', // conservative, moderate, aggressive
        investmentObjectives: ['growth', 'income'], // growth, income, speculation, preservation
        timeHorizon: '5_to_10_years',
        liquidityNeeds: 'low'
      },
      
      // Political/Legal Information (Required for compliance)
      politicalExposure: {
        isPEP: false, // Politically Exposed Person
        pepDetails: '',
        familyPEP: false,
        familyPEPDetails: '',
        governmentAffiliation: false,
        affiliationDetails: ''
      },
      
      // Legal and Regulatory
      legalStatus: {
        criminalHistory: false,
        regulatoryActions: false,
        bankruptcyHistory: false,
        litigationHistory: false,
        sanctionsCheck: 'passed', // passed, pending, failed
        ofacCheck: 'passed',
        pepCheck: 'passed'
      },
      
      // Beneficiary and Estate Information
      beneficiaries: [],
      
      // Emergency Contacts (Multiple required for banking compliance)
      emergencyContacts: [
        {
          id: '1',
          name: 'Jane Doe',
          relationship: 'spouse',
          phone: '+1 (555) 987-6543',
          email: 'jane.doe@email.com',
          address: {
            street: '123 Wall Street',
            city: 'New York',
            state: 'NY',
            country: 'United States',
            postalCode: '10005'
          },
          isPrimary: true,
          canAccessAccount: false,
          notificationLevel: 'emergency_only'
        }
      ],
      
      // Account Preferences
      preferences: {
        currency: 'USD',
        preferredLanguage: 'en',
        timezone: 'America/New_York',
        marketingConsent: false,
        newsletterSubscription: true,
        publicProfile: false,
        communicationPreference: 'email', // email, phone, mail, secure_message
        statementDelivery: 'electronic' // electronic, mail, both
      },
      
      // Professional Licenses and Certifications
      licenses: [],
      
      // Account Classification
      accountType: 'individual', // individual, joint, corporate, trust, ira
      investorClassification: 'retail', // retail, accredited, qualified_institutional
      
      // Compliance Flags
      complianceStatus: {
        kycComplete: false,
        amlComplete: false,
        cddComplete: false, // Customer Due Diligence
        eddRequired: false, // Enhanced Due Diligence
        sanctionsCleared: true,
        pepCleared: true,
        lastReviewDate: '2024-01-15T00:00:00Z',
        nextReviewDate: '2024-07-15T00:00:00Z',
        riskRating: 'low' // low, medium, high
      }
    },
    // Notification settings
    notifications: {
      emailNotifications: true,
      pushNotifications: true,
      smsNotifications: false,
      weeklyReports: true,
      securityAlerts: true,
      marketingEmails: false,
      systemUpdates: true,
      userActivities: true,
      financialAlerts: true,
      kycAlerts: true
    },
    // Security settings
    security: {
      twoFactorEnabled: false,
      loginAlerts: true,
      sessionTimeout: 30,
      ipWhitelist: [],
      apiKeyRotation: 'monthly',
      // Crypto security settings
      transactionConfirmation: true,
      withdrawalLimits: {
        daily: 10000,
        monthly: 100000
      },
      whitelistedAddresses: [],
      multiSigRequired: false,
      coldStorageEnabled: true,
      hardwareWalletRequired: false,
      transactionEmailAlerts: true,
      largeTransactionThreshold: 5000,
      autoLockDuration: 15, // minutes
      requirePasswordForTransactions: true,
      ipRestrictionEnabled: false,
      timeLockEnabled: false,
      emergencyContactsEnabled: false
    },
    // Appearance settings
    appearance: {
      theme: 'dark',
      sidebarMode: 'expanded',
      compactMode: false,
      animationsEnabled: true,
      language: 'en',
      dateFormat: 'MM/DD/YYYY',
      timeFormat: '12h'
    }
  });

  const [passwords, setPasswords] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  const [activeSessions, setActiveSessions] = useState([
    {
      id: '1',
      device: 'MacBook Pro',
      browser: 'Chrome 118.0.0.0',
      location: 'New York, NY',
      ip: '192.168.1.100',
      lastActive: '2024-01-15T10:30:00Z',
      current: true
    },
    {
      id: '2',
      device: 'iPhone 15',
      browser: 'Safari Mobile',
      location: 'New York, NY',
      ip: '192.168.1.101',
      lastActive: '2024-01-15T09:15:00Z',
      current: false
    },
    {
      id: '3',
      device: 'Windows PC',
      browser: 'Firefox 120.0',
      location: 'Brooklyn, NY',
      ip: '10.0.0.5',
      lastActive: '2024-01-14T18:45:00Z',
      current: false
    }
  ]);

  const [activityLog, setActivityLog] = useState([
    {
      id: '1',
      type: 'buy',
      category: 'trading',
      description: 'Purchased 0.5 BTC',
      details: {
        asset: 'BTC',
        amount: 0.5,
        price: 54000,
        totalValue: 27000,
        orderType: 'market',
        orderId: 'BUY-BTC-001'
      },
      device: 'MacBook Pro - Chrome',
      location: 'New York, NY',
      ip: '192.168.1.100',
      timestamp: '2024-01-15T14:30:00Z',
      status: 'completed'
    },
    {
      id: '2',
      type: 'withdrawal',
      category: 'financial',
      description: 'Withdrew 1.2 ETH to external wallet',
      details: {
        asset: 'ETH',
        amount: 1.2,
        address: '0x742d35cc6634c0532925a3b8d9a6537f01',
        txHash: '0xa1b2c3d4...e5f6a7b8',
        fee: 0.001,
        networkFee: 0.002
      },
      device: 'MacBook Pro - Chrome',
      location: 'New York, NY',
      ip: '192.168.1.100',
      timestamp: '2024-01-15T13:45:00Z',
      status: 'completed'
    },
    {
      id: '3',
      type: 'sell',
      category: 'trading',
      description: 'Sold 1000 FRAK tokens',
      details: {
        asset: 'FRAK',
        amount: 1000,
        price: 2.45,
        totalValue: 2450,
        orderType: 'limit',
        orderId: 'SELL-FRAK-125'
      },
      device: 'iPhone 15 - Safari',
      location: 'New York, NY',
      ip: '192.168.1.101',
      timestamp: '2024-01-15T12:20:00Z',
      status: 'completed'
    },
    {
      id: '4',
      type: 'login',
      category: 'authentication',
      description: 'Successful login',
      details: {
        method: '2FA',
        sessionId: 'sess_abc123',
        userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)'
      },
      device: 'MacBook Pro - Chrome',
      location: 'New York, NY',
      ip: '192.168.1.100',
      timestamp: '2024-01-15T10:30:00Z',
      status: 'success'
    },
    {
      id: '5',
      type: 'settings_change',
      category: 'account',
      description: 'Updated security settings',
      details: {
        changedFields: ['twoFactorEnabled', 'sessionTimeout'],
        previousValues: { twoFactorEnabled: false, sessionTimeout: 60 },
        newValues: { twoFactorEnabled: true, sessionTimeout: 30 },
        section: 'security'
      },
      device: 'MacBook Pro - Chrome',
      location: 'New York, NY',
      ip: '192.168.1.100',
      timestamp: '2024-01-15T10:15:00Z',
      status: 'completed'
    },
    {
      id: '6',
      type: 'deposit',
      category: 'financial',
      description: 'Deposited 2.5 ETH from external wallet',
      details: {
        asset: 'ETH',
        amount: 2.5,
        fromAddress: '0x89abcdef...12345678',
        txHash: '0xdef456...abc123',
        confirmations: 12,
        networkFee: 0.0015
      },
      device: 'iPhone 15 - Safari',
      location: 'New York, NY',
      ip: '192.168.1.101',
      timestamp: '2024-01-15T09:45:00Z',
      status: 'completed'
    },
    {
      id: '7',
      type: 'like',
      category: 'social',
      description: 'Liked a post about Bitcoin analysis',
      details: {
        postId: 'post_789',
        postTitle: 'Bitcoin Technical Analysis - Bullish Trend',
        author: 'CryptoAnalyst',
        contentType: 'analysis'
      },
      device: 'iPhone 15 - Safari',
      location: 'New York, NY',
      ip: '192.168.1.101',
      timestamp: '2024-01-15T09:30:00Z',
      status: 'completed'
    },
    {
      id: '8',
      type: 'trade',
      category: 'trading',
      description: 'Executed BTC/USDC swap',
      details: {
        fromAsset: 'BTC',
        toAsset: 'USDC',
        fromAmount: 0.1,
        toAmount: 5400,
        rate: 54000,
        slippage: 0.5,
        tradeId: 'SWAP-001'
      },
      device: 'MacBook Pro - Chrome',
      location: 'New York, NY',
      ip: '192.168.1.100',
      timestamp: '2024-01-14T18:45:00Z',
      status: 'completed'
    },
    {
      id: '9',
      type: 'charge',
      category: 'billing',
      description: 'Premium subscription charged',
      details: {
        amount: 29.99,
        currency: 'USD',
        subscription: 'Premium Plan',
        period: 'monthly',
        paymentMethod: 'Credit Card (**** 1234)',
        invoiceId: 'INV-2024-001'
      },
      device: 'MacBook Pro - Chrome',
      location: 'New York, NY',
      ip: '192.168.1.100',
      timestamp: '2024-01-14T16:20:00Z',
      status: 'completed'
    },
    {
      id: '10',
      type: 'settings_change',
      category: 'account',
      description: 'Updated profile information',
      details: {
        changedFields: ['phone', 'timezone'],
        previousValues: { phone: '+1 (555) 999-8888', timezone: 'America/Los_Angeles' },
        newValues: { phone: '+1 (555) 123-4567', timezone: 'America/New_York' },
        section: 'profile'
      },
      device: 'iPhone 15 - Safari',
      location: 'New York, NY',
      ip: '192.168.1.101',
      timestamp: '2024-01-14T15:10:00Z',
      status: 'completed'
    },
    {
      id: '11',
      type: 'logout',
      category: 'authentication',
      description: 'User logged out',
      details: {
        sessionDuration: '4h 32m',
        sessionId: 'sess_xyz789',
        reason: 'user_initiated'
      },
      device: 'Windows PC - Firefox',
      location: 'Brooklyn, NY',
      ip: '10.0.0.5',
      timestamp: '2024-01-14T12:45:00Z',
      status: 'completed'
    },
    {
      id: '12',
      type: 'login',
      category: 'authentication',
      description: 'Failed login attempt',
      details: {
        method: 'password',
        failureReason: 'invalid_credentials',
        attemptCount: 3,
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'
      },
      device: 'Unknown Device',
      location: 'Los Angeles, CA',
      ip: '203.0.113.12',
      timestamp: '2024-01-14T22:30:00Z',
      status: 'failed'
    }
  ]);

  const [loginHistory, setLoginHistory] = useState([
    {
      id: '1',
      device: 'MacBook Pro - Chrome',
      location: 'New York, NY',
      ip: '192.168.1.100',
      timestamp: '2024-01-15T10:30:00Z',
      status: 'success'
    },
    {
      id: '2',
      device: 'iPhone 15 - Safari',
      location: 'New York, NY',
      ip: '192.168.1.101',
      timestamp: '2024-01-15T09:15:00Z',
      status: 'success'
    },
    {
      id: '3',
      device: 'Unknown Device',
      location: 'Los Angeles, CA',
      ip: '203.0.113.12',
      timestamp: '2024-01-14T22:30:00Z',
      status: 'failed'
    }
  ]);

  const [apiKeys, setApiKeys] = useState([
    {
      id: '1',
      name: 'Production API',
      key: 'fx_live_1234...abcd',
      permissions: ['read', 'write'],
      lastUsed: '2024-01-15T08:30:00Z',
      created: '2024-01-01T00:00:00Z'
    },
    {
      id: '2',
      name: 'Development API',
      key: 'fx_test_5678...efgh',
      permissions: ['read'],
      lastUsed: '2024-01-14T16:20:00Z',
      created: '2024-01-10T00:00:00Z'
    }
  ]);

  const [accountStats, setAccountStats] = useState({
    totalLogins: 1247,
    accountAge: 156, // days
    lastPasswordChange: '2024-01-01T00:00:00Z',
    dataExported: 2,
    storageUsed: 524288000, // bytes
    storageLimit: 1073741824 // bytes
  });

  const [transactionHistory, setTransactionHistory] = useState([
    {
      id: '1',
      type: 'withdrawal',
      asset: 'BTC',
      amount: 0.05234,
      value: 2850.45,
      address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
      timestamp: '2024-01-15T14:32:00Z',
      status: 'completed',
      txHash: '6f7b8c9d...a1b2c3d4',
      confirmations: 6
    },
    {
      id: '2',
      type: 'deposit',
      asset: 'ETH',
      amount: 1.2345,
      value: 3156.78,
      address: '0x742d35cc6634c0532925a3b8d9a6537f01',
      timestamp: '2024-01-15T10:15:00Z',
      status: 'completed',
      txHash: '0xa1b2c3d4...e5f6a7b8',
      confirmations: 12
    },
    {
      id: '3',
      type: 'trade',
      asset: 'FRAK',
      amount: 1000,
      value: 2450.00,
      address: 'internal',
      timestamp: '2024-01-14T16:45:00Z',
      status: 'completed',
      txHash: 'internal_trade_567',
      confirmations: null
    },
    {
      id: '4',
      type: 'withdrawal',
      asset: 'USDC',
      amount: 5000,
      value: 5000.00,
      address: '0x89abcdef...12345678',
      timestamp: '2024-01-14T09:20:00Z',
      status: 'pending',
      txHash: null,
      confirmations: 0
    }
  ]);

  const [whitelistedAddresses, setWhitelistedAddresses] = useState([
    {
      id: '1',
      label: 'Personal Wallet',
      address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
      asset: 'BTC',
      dateAdded: '2024-01-10T00:00:00Z',
      lastUsed: '2024-01-15T14:32:00Z'
    },
    {
      id: '2',
      label: 'Coinbase Wallet',
      address: '0x742d35cc6634c0532925a3b8d9a6537f01',
      asset: 'ETH',
      dateAdded: '2024-01-08T00:00:00Z',
      lastUsed: '2024-01-15T10:15:00Z'
    }
  ]);

  // KYC/AML State
  const [kycDocuments, setKycDocuments] = useState([
    {
      id: '1',
      type: 'government_id',
      name: 'Driver License Front',
      fileName: 'drivers_license_front.jpg',
      fileSize: 2048576, // 2MB
      uploadDate: '2024-01-10T00:00:00Z',
      status: 'approved',
      reviewDate: '2024-01-11T00:00:00Z',
      reviewNote: 'Document verified successfully',
      downloadUrl: '/api/documents/dl_front_verified.pdf'
    },
    {
      id: '2',
      type: 'government_id',
      name: 'Driver License Back',
      fileName: 'drivers_license_back.jpg',
      fileSize: 1876432, // 1.8MB
      uploadDate: '2024-01-10T00:00:00Z',
      status: 'approved',
      reviewDate: '2024-01-11T00:00:00Z',
      reviewNote: 'Document verified successfully',
      downloadUrl: '/api/documents/dl_back_verified.pdf'
    },
    {
      id: '3',
      type: 'proof_of_address',
      name: 'Utility Bill',
      fileName: 'utility_bill_december.pdf',
      fileSize: 512000, // 500KB
      uploadDate: '2024-01-12T00:00:00Z',
      status: 'pending',
      reviewDate: null,
      reviewNote: 'Under review by compliance team',
      downloadUrl: null
    },
    {
      id: '4',
      type: 'selfie',
      name: 'Identity Verification Selfie',
      fileName: 'selfie_verification.jpg',
      fileSize: 1024000, // 1MB
      uploadDate: '2024-01-13T00:00:00Z',
      status: 'rejected',
      reviewDate: '2024-01-14T00:00:00Z',
      reviewNote: 'Image quality too low, please resubmit with better lighting',
      downloadUrl: null
    }
  ]);

  const [kycStatus, setKycStatus] = useState({
    level: 'level_2',
    status: 'pending_level_3',
    completedDate: '2024-01-11T00:00:00Z',
    nextReviewDate: '2024-07-11T00:00:00Z',
    withdrawalLimit: 50000,
    tradingLimit: 100000,
    requiresUpdate: false
  });

  const [uploadProgress, setUploadProgress] = useState({});
  const [dragOver, setDragOver] = useState(false);

  const [copiedKey, setCopiedKey] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);

  const tabs = [
    { id: 'profile', label: 'Profile', icon: User },
    { id: 'login', label: 'Login & Access', icon: Lock },
    { id: 'security', label: 'Security', icon: Shield },
    { id: 'kyc', label: 'KYC/AML', icon: FileCheck },
    { id: 'privacy', label: 'Privacy', icon: Eye },
    { id: 'notifications', label: 'Notifications', icon: Bell },
    { id: 'api', label: 'API Keys', icon: Key },
    { id: 'sessions', label: 'Activity Log', icon: Activity },
    { id: 'statements', label: 'Statements', icon: FileText },
    { id: 'appearance', label: 'Appearance', icon: Palette }
  ];

  const handleSettingChange = (category, setting, value) => {
    setSettings(prev => ({
      ...prev,
      [category]: {
        ...prev[category],
        [setting]: value
      }
    }));
  };

  const handlePasswordChange = (field, value) => {
    setPasswords(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSaveSettings = () => {
    // TODO: Implement API call to save settings
    console.log('Saving settings:', settings);
    // Show success notification
  };

  const handlePasswordUpdate = () => {
    if (passwords.newPassword !== passwords.confirmPassword) {
      alert('New passwords do not match');
      return;
    }
    // TODO: Implement password update API call
    console.log('Updating password');
    setPasswords({ currentPassword: '', newPassword: '', confirmPassword: '' });
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: 'numeric',
      minute: '2-digit'
    });
  };

  const formatBytes = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getDeviceIcon = (device) => {
    if (device.toLowerCase().includes('iphone') || device.toLowerCase().includes('android')) {
      return Smartphone;
    } else if (device.toLowerCase().includes('ipad') || device.toLowerCase().includes('tablet')) {
      return Tablet;
    } else {
      return Laptop;
    }
  };

  const handleCopyApiKey = (key) => {
    navigator.clipboard.writeText(key);
    setCopiedKey(key);
    setTimeout(() => setCopiedKey(null), 2000);
  };

  const handleRevokeSession = (sessionId) => {
    setActiveSessions(prev => prev.filter(session => session.id !== sessionId));
    console.log('Revoking session:', sessionId);
  };

  const handleDeleteApiKey = (keyId) => {
    setApiKeys(prev => prev.filter(key => key.id !== keyId));
    console.log('Deleting API key:', keyId);
  };

  const handleSaveSettingsWithLoading = async () => {
    setIsLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      handleSaveSettings();
      setSaveSuccess(true);
      setTimeout(() => setSaveSuccess(false), 3000);
    } catch (error) {
      console.error('Error saving settings:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // KYC Helper Functions
  const getKycLevelLabel = (level) => {
    switch (level) {
      case 'level_1': return 'Level 1 - Basic';
      case 'level_2': return 'Level 2 - Intermediate';
      case 'level_3': return 'Level 3 - Advanced';
      default: return 'Unverified';
    }
  };

  const getKycStatusColor = (status) => {
    switch (status) {
      case 'approved': return 'text-green-600 bg-green-100';
      case 'pending': return 'text-yellow-600 bg-yellow-100';
      case 'rejected': return 'text-red-600 bg-red-100';
      case 'expired': return 'text-gray-600 bg-gray-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getDocumentTypeIcon = (type) => {
    switch (type) {
      case 'government_id': return IdCard;
      case 'proof_of_address': return Building;
      case 'selfie': return Camera;
      case 'bank_statement': return Receipt;
      default: return FileText;
    }
  };

  const handleFileUpload = (event, documentType) => {
    const files = Array.from(event.target.files || []);
    
    files.forEach(file => {
      const newDocument = {
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
        type: documentType,
        name: `${documentType.replace('_', ' ').replace(/\b\w/g, (l) => l.toUpperCase())} - ${file.name}`,
        fileName: file.name,
        fileSize: file.size,
        uploadDate: new Date().toISOString(),
        status: 'pending',
        reviewDate: null,
        reviewNote: 'Document uploaded, awaiting review',
        downloadUrl: null
      };
      
      setKycDocuments(prev => [...prev, newDocument]);
      
      // Simulate upload progress
      setUploadProgress(prev => ({ ...prev, [newDocument.id]: 0 }));
      const progressInterval = setInterval(() => {
        setUploadProgress(prev => {
          const currentProgress = prev[newDocument.id] || 0;
          if (currentProgress >= 100) {
            clearInterval(progressInterval);
            setTimeout(() => {
              setUploadProgress(prev => {
                const { [newDocument.id]: _, ...rest } = prev;
                return rest;
              });
            }, 1000);
            return prev;
          }
          return { ...prev, [newDocument.id]: currentProgress + 10 };
        });
      }, 200);
    });
  };

  const handleDownloadDocument = (document) => {
    if (document.downloadUrl) {
      // Create a temporary link to download the document
      const link = document.createElement('a');
      link.href = document.downloadUrl;
      link.download = document.fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      console.log('Downloading document:', document.fileName);
    }
  };

  const handleDeleteDocument = (documentId) => {
    setKycDocuments(prev => prev.filter(doc => doc.id !== documentId));
    console.log('Deleting document:', documentId);
  };

  const handleDragOver = (event) => {
    event.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (event) => {
    event.preventDefault();
    setDragOver(false);
  };

  const handleDrop = (event, documentType) => {
    event.preventDefault();
    setDragOver(false);
    
    const files = Array.from(event.dataTransfer.files);
    if (files.length > 0) {
      handleFileUpload({ target: { files } }, documentType);
    }
  };

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">User Settings</h1>
            <p className="text-gray-600 mt-1">Manage your account preferences and security settings</p>
          </div>
          <button
            onClick={handleSaveSettings}
            className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200"
          >
            <Save size={16} className="mr-2" />
            Save Changes
          </button>
        </div>
      </div>

      <div className="flex gap-6">
        {/* Sidebar Tabs */}
        <div className="w-64 bg-white rounded-lg shadow-sm border border-gray-200 p-4 h-fit">
          <nav className="space-y-2">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`w-full flex items-center px-3 py-2 text-left rounded-lg transition-colors duration-200 ${
                  activeTab === tab.id
                    ? 'bg-blue-50 text-blue-700 border border-blue-200'
                    : 'text-gray-700 hover:bg-gray-50'
                }`}
              >
                <tab.icon size={16} className="mr-3" />
                {tab.label}
              </button>
            ))}
          </nav>
        </div>

        {/* Main Content */}
        <div className="flex-1 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          {/* Profile Tab */}
            {activeTab === 'profile' && (
            <div className="space-y-6">
              <div>
                <div className="flex items-center justify-between mb-6">
                  <div>
                    <h2 className="text-xl font-semibold text-gray-900">Customer Profile & Compliance</h2>
                    <p className="text-sm text-gray-500 mt-1">Complete profile required for securities trading and banking services</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className={`px-3 py-1 text-xs rounded-full ${
                      settings.profile.complianceStatus.kycComplete && settings.profile.complianceStatus.amlComplete
                        ? 'bg-green-100 text-green-800'
                        : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {settings.profile.complianceStatus.kycComplete && settings.profile.complianceStatus.amlComplete
                        ? 'Compliance Complete'
                        : 'Pending Compliance'
                      }
                    </span>
                  </div>
                </div>
                
                {/* Compliance Status Overview */}
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                  <div className="flex items-start justify-between">
                    <div className="flex items-start space-x-3">
                      <Shield size={20} className="text-blue-600 mt-0.5" />
                      <div className="flex-1">
                        <h3 className="font-medium text-blue-800 mb-2">Regulatory Compliance Status</h3>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div className="flex items-center space-x-2">
                            <div className={`w-2 h-2 rounded-full ${
                              settings.profile.complianceStatus.kycComplete ? 'bg-green-500' : 'bg-yellow-500'
                            }`}></div>
                            <span className="text-blue-700">KYC: {settings.profile.complianceStatus.kycComplete ? 'Complete' : 'Pending'}</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <div className={`w-2 h-2 rounded-full ${
                              settings.profile.complianceStatus.amlComplete ? 'bg-green-500' : 'bg-yellow-500'
                            }`}></div>
                            <span className="text-blue-700">AML: {settings.profile.complianceStatus.amlComplete ? 'Complete' : 'Pending'}</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <div className={`w-2 h-2 rounded-full ${
                              settings.profile.complianceStatus.sanctionsCleared ? 'bg-green-500' : 'bg-red-500'
                            }`}></div>
                            <span className="text-blue-700">Sanctions: {settings.profile.complianceStatus.sanctionsCleared ? 'Cleared' : 'Pending'}</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <div className={`w-2 h-2 rounded-full bg-${
                              settings.profile.complianceStatus.riskRating === 'low' ? 'green' :
                              settings.profile.complianceStatus.riskRating === 'medium' ? 'yellow' : 'red'
                            }-500`}></div>
                            <span className="text-blue-700">Risk: {settings.profile.complianceStatus.riskRating.toUpperCase()}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => setActiveTab('kyc')}
                        className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors duration-200 flex items-center space-x-2"
                      >
                        <FileCheck size={16} />
                        <span>Manage KYC</span>
                      </button>
                    </div>
                  </div>
                </div>

                {/* Legal Identity Information */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center space-x-2">
                    <IdCard size={18} className="text-gray-600" />
                    <span>Legal Identity Information</span>
                    <span className="text-red-500 text-sm">*Required</span>
                  </h3>
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                    <div className="flex items-start space-x-3">
                      <AlertTriangle size={16} className="text-red-600 mt-0.5" />
                      <div>
                        <p className="text-sm text-red-800 font-medium">Securities Compliance Required</p>
                        <p className="text-sm text-red-700 mt-1">
                          All fields must match your government-issued identification documents exactly.
                        </p>
                      </div>
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Legal First Name *
                      </label>
                      <input
                        type="text"
                        value={settings.profile.firstName}
                        onChange={(e) => handleSettingChange('profile', 'firstName', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        required
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Middle Name
                      </label>
                      <input
                        type="text"
                        value={settings.profile.middleName}
                        onChange={(e) => handleSettingChange('profile', 'middleName', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="As shown on ID"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Legal Last Name *
                      </label>
                      <input
                        type="text"
                        value={settings.profile.lastName}
                        onChange={(e) => handleSettingChange('profile', 'lastName', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        required
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Full Legal Name *
                      </label>
                      <input
                        type="text"
                        value={settings.profile.legalName}
                        onChange={(e) => handleSettingChange('profile', 'legalName', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Exactly as on government ID"
                        required
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Date of Birth *
                      </label>
                      <div className="relative">
                        <Calendar size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="date"
                          value={settings.profile.dateOfBirth}
                          onChange={(e) => handleSettingChange('profile', 'dateOfBirth', e.target.value)}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          required
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Place of Birth *
                      </label>
                      <input
                        type="text"
                        value={settings.profile.placeOfBirth}
                        onChange={(e) => handleSettingChange('profile', 'placeOfBirth', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="City, State, Country"
                        required
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Gender
                      </label>
                      <select
                        value={settings.profile.gender}
                        onChange={(e) => handleSettingChange('profile', 'gender', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="male">Male</option>
                        <option value="female">Female</option>
                        <option value="non_binary">Non-binary</option>
                        <option value="prefer_not_to_say">Prefer not to say</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Marital Status *
                      </label>
                      <select
                        value={settings.profile.maritalStatus}
                        onChange={(e) => handleSettingChange('profile', 'maritalStatus', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        required
                      >
                        <option value="single">Single</option>
                        <option value="married">Married</option>
                        <option value="divorced">Divorced</option>
                        <option value="widowed">Widowed</option>
                        <option value="separated">Separated</option>
                        <option value="domestic_partnership">Domestic Partnership</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Nationality *
                      </label>
                      <div className="relative">
                        <Globe size={16} className="absolute left-3 top-3 text-gray-400" />
                        <select
                          value={settings.profile.nationality}
                          onChange={(e) => handleSettingChange('profile', 'nationality', e.target.value)}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          required
                        >
                          <option value="">Select Nationality</option>
                          <option value="US">United States</option>
                          <option value="CA">Canada</option>
                          <option value="GB">United Kingdom</option>
                          <option value="DE">Germany</option>
                          <option value="FR">France</option>
                          <option value="JP">Japan</option>
                          <option value="AU">Australia</option>
                          <option value="OTHER">Other</option>
                        </select>
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        SSN (Last 4 digits) *
                      </label>
                      <input
                        type="text"
                        value={settings.profile.ssn}
                        onChange={(e) => handleSettingChange('profile', 'ssn', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="XXXX"
                        maxLength="4"
                        pattern="[0-9]{4}"
                        required
                      />
                    </div>
                  </div>
                </div>

                {/* Contact Information */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Contact Information</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Email Address
                      </label>
                      <div className="relative">
                        <Mail size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="email"
                          value={settings.profile.email}
                          onChange={(e) => handleSettingChange('profile', 'email', e.target.value)}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Phone Number
                      </label>
                      <div className="relative">
                        <Phone size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="tel"
                          value={settings.profile.phone}
                          onChange={(e) => handleSettingChange('profile', 'phone', e.target.value)}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Website
                      </label>
                      <div className="relative">
                        <ExternalLink size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="url"
                          value={settings.profile.website}
                          onChange={(e) => handleSettingChange('profile', 'website', e.target.value)}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="https://"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Timezone
                      </label>
                      <select
                        value={settings.profile.timezone}
                        onChange={(e) => handleSettingChange('profile', 'timezone', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="America/New_York">Eastern Time (UTC-5)</option>
                        <option value="America/Chicago">Central Time (UTC-6)</option>
                        <option value="America/Denver">Mountain Time (UTC-7)</option>
                        <option value="America/Los_Angeles">Pacific Time (UTC-8)</option>
                        <option value="Europe/London">London (UTC+0)</option>
                        <option value="Europe/Paris">Paris (UTC+1)</option>
                        <option value="Europe/Berlin">Berlin (UTC+1)</option>
                        <option value="Asia/Tokyo">Tokyo (UTC+9)</option>
                        <option value="Asia/Singapore">Singapore (UTC+8)</option>
                        <option value="Australia/Sydney">Sydney (UTC+10)</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Professional Information */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Professional Information</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Occupation
                      </label>
                      <div className="relative">
                        <User size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="text"
                          value={settings.profile.occupation}
                          onChange={(e) => handleSettingChange('profile', 'occupation', e.target.value)}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="e.g., Software Engineer"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Company
                      </label>
                      <div className="relative">
                        <Building size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="text"
                          value={settings.profile.company}
                          onChange={(e) => handleSettingChange('profile', 'company', e.target.value)}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="Company name"
                        />
                      </div>
                    </div>
                  </div>
                  <div className="mt-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Bio
                    </label>
                    <textarea
                      value={settings.profile.bio}
                      onChange={(e) => handleSettingChange('profile', 'bio', e.target.value)}
                      rows={3}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Tell us about yourself..."
                    />
                  </div>
                </div>

                {/* Address Information */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Address Information</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Street Address
                      </label>
                      <div className="relative">
                        <MapPin size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="text"
                          value={settings.profile.address.street}
                          onChange={(e) => handleSettingChange('profile', 'address', {
                            ...settings.profile.address,
                            street: e.target.value
                          })}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="123 Main Street"
                        />
                      </div>
                    </div>
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Address Line 2
                      </label>
                      <input
                        type="text"
                        value={settings.profile.address.street2}
                        onChange={(e) => handleSettingChange('profile', 'address', {
                          ...settings.profile.address,
                          street2: e.target.value
                        })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Apartment, suite, unit, building, floor, etc."
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        City
                      </label>
                      <input
                        type="text"
                        value={settings.profile.address.city}
                        onChange={(e) => handleSettingChange('profile', 'address', {
                          ...settings.profile.address,
                          city: e.target.value
                        })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        State/Province
                      </label>
                      <input
                        type="text"
                        value={settings.profile.address.state}
                        onChange={(e) => handleSettingChange('profile', 'address', {
                          ...settings.profile.address,
                          state: e.target.value
                        })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Country
                      </label>
                      <select
                        value={settings.profile.address.country}
                        onChange={(e) => handleSettingChange('profile', 'address', {
                          ...settings.profile.address,
                          country: e.target.value
                        })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="United States">United States</option>
                        <option value="Canada">Canada</option>
                        <option value="United Kingdom">United Kingdom</option>
                        <option value="Germany">Germany</option>
                        <option value="France">France</option>
                        <option value="Japan">Japan</option>
                        <option value="Australia">Australia</option>
                        <option value="Other">Other</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Postal Code
                      </label>
                      <input
                        type="text"
                        value={settings.profile.address.postalCode}
                        onChange={(e) => handleSettingChange('profile', 'address', {
                          ...settings.profile.address,
                          postalCode: e.target.value
                        })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                  </div>
                </div>

                {/* Social Media & Links */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Social Media & Links</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        LinkedIn Profile
                      </label>
                      <div className="relative">
                        <ExternalLink size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="url"
                          value={settings.profile.socialMedia.linkedin}
                          onChange={(e) => handleSettingChange('profile', 'socialMedia', {
                            ...settings.profile.socialMedia,
                            linkedin: e.target.value
                          })}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="https://linkedin.com/in/username"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Twitter Profile
                      </label>
                      <div className="relative">
                        <ExternalLink size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="url"
                          value={settings.profile.socialMedia.twitter}
                          onChange={(e) => handleSettingChange('profile', 'socialMedia', {
                            ...settings.profile.socialMedia,
                            twitter: e.target.value
                          })}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="https://twitter.com/username"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        GitHub Profile
                      </label>
                      <div className="relative">
                        <ExternalLink size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="url"
                          value={settings.profile.socialMedia.github}
                          onChange={(e) => handleSettingChange('profile', 'socialMedia', {
                            ...settings.profile.socialMedia,
                            github: e.target.value
                          })}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="https://github.com/username"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Personal Website
                      </label>
                      <div className="relative">
                        <Globe size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="url"
                          value={settings.profile.website}
                          onChange={(e) => handleSettingChange('profile', 'website', e.target.value)}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="https://yourwebsite.com"
                        />
                      </div>
                    </div>
                  </div>
                </div>

                {/* Emergency Contact */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Emergency Contact</h3>
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-4">
                    <div className="flex items-start space-x-3">
                      <AlertTriangle size={20} className="text-orange-600 mt-0.5" />
                      <div>
                        <h4 className="font-medium text-orange-800">Emergency Contact Information</h4>
                        <p className="text-sm text-orange-700 mt-1">
                          This contact will be notified in case of account emergencies or security issues.
                        </p>
                      </div>
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Contact Name
                      </label>
                      <div className="relative">
                        <User size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="text"
                          value={settings.profile.emergencyContact.name}
                          onChange={(e) => handleSettingChange('profile', 'emergencyContact', {
                            ...settings.profile.emergencyContact,
                            name: e.target.value
                          })}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="Full name"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Relationship
                      </label>
                      <select
                        value={settings.profile.emergencyContact.relationship}
                        onChange={(e) => handleSettingChange('profile', 'emergencyContact', {
                          ...settings.profile.emergencyContact,
                          relationship: e.target.value
                        })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="spouse">Spouse</option>
                        <option value="parent">Parent</option>
                        <option value="sibling">Sibling</option>
                        <option value="child">Child</option>
                        <option value="friend">Friend</option>
                        <option value="colleague">Colleague</option>
                        <option value="other">Other</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Phone Number
                      </label>
                      <div className="relative">
                        <Phone size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="tel"
                          value={settings.profile.emergencyContact.phone}
                          onChange={(e) => handleSettingChange('profile', 'emergencyContact', {
                            ...settings.profile.emergencyContact,
                            phone: e.target.value
                          })}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="+1 (555) 123-4567"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Email Address
                      </label>
                      <div className="relative">
                        <Mail size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="email"
                          value={settings.profile.emergencyContact.email}
                          onChange={(e) => handleSettingChange('profile', 'emergencyContact', {
                            ...settings.profile.emergencyContact,
                            email: e.target.value
                          })}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="emergency@contact.com"
                        />
                      </div>
                    </div>
                  </div>
                </div>

                {/* Profile Preferences */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Profile Preferences</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <DollarSign size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Preferred Currency</p>
                          <p className="text-sm text-gray-500">Default currency for displaying values</p>
                        </div>
                      </div>
                      <select
                        value={settings.profile.preferences.currency}
                        onChange={(e) => handleSettingChange('profile', 'preferences', {
                          ...settings.profile.preferences,
                          currency: e.target.value
                        })}
                        className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="USD">USD - US Dollar</option>
                        <option value="EUR">EUR - Euro</option>
                        <option value="GBP">GBP - British Pound</option>
                        <option value="JPY">JPY - Japanese Yen</option>
                        <option value="CAD">CAD - Canadian Dollar</option>
                        <option value="AUD">AUD - Australian Dollar</option>
                        <option value="BTC">BTC - Bitcoin</option>
                        <option value="ETH">ETH - Ethereum</option>
                      </select>
                    </div>

                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Eye size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Public Profile</p>
                          <p className="text-sm text-gray-500">Allow others to view your public profile information</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.profile.preferences.publicProfile}
                          onChange={(e) => handleSettingChange('profile', 'preferences', {
                            ...settings.profile.preferences,
                            publicProfile: e.target.checked
                          })}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Bell size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Newsletter Subscription</p>
                          <p className="text-sm text-gray-500">Receive our weekly newsletter and market updates</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.profile.preferences.newsletterSubscription}
                          onChange={(e) => handleSettingChange('profile', 'preferences', {
                            ...settings.profile.preferences,
                            newsletterSubscription: e.target.checked
                          })}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between py-3">
                      <div className="flex items-center space-x-3">
                        <Star size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Marketing Communications</p>
                          <p className="text-sm text-gray-500">Receive promotional offers and product updates</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.profile.preferences.marketingConsent}
                          onChange={(e) => handleSettingChange('profile', 'preferences', {
                            ...settings.profile.preferences,
                            marketingConsent: e.target.checked
                          })}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>
                  </div>
                </div>

              </div>
            </div>
          )}

          {/* Login & Access Tab */}
          {activeTab === 'login' && (
            <div className="space-y-6">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 mb-6">Login & Access Settings</h2>
                
                {/* Password Change Section */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Password Management</h3>
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                    <div className="flex items-start space-x-3">
                      <Info size={20} className="text-blue-600 mt-0.5" />
                      <div>
                        <h4 className="font-medium text-blue-800">Password Security</h4>
                        <p className="text-sm text-blue-700 mt-1">
                          Use a strong password with at least 8 characters, including uppercase, lowercase, numbers, and symbols.
                        </p>
                      </div>
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Current Password
                      </label>
                      <div className="relative">
                        <input
                          type={showCurrentPassword ? 'text' : 'password'}
                          value={passwords.currentPassword}
                          onChange={(e) => handlePasswordChange('currentPassword', e.target.value)}
                          className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        />
                        <button
                          type="button"
                          onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                          className="absolute right-3 top-3 text-gray-400 hover:text-gray-600"
                        >
                          {showCurrentPassword ? <EyeOff size={16} /> : <Eye size={16} />}
                        </button>
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        New Password
                      </label>
                      <div className="relative">
                        <input
                          type={showPassword ? 'text' : 'password'}
                          value={passwords.newPassword}
                          onChange={(e) => handlePasswordChange('newPassword', e.target.value)}
                          className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="absolute right-3 top-3 text-gray-400 hover:text-gray-600"
                        >
                          {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}
                        </button>
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Confirm Password
                      </label>
                      <input
                        type="password"
                        value={passwords.confirmPassword}
                        onChange={(e) => handlePasswordChange('confirmPassword', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                  </div>
                  <button
                    onClick={handlePasswordUpdate}
                    className="mt-4 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200"
                  >
                    Update Password
                  </button>
                  <div className="mt-4 text-sm text-gray-500">
                    <p><strong>Last changed:</strong> {formatDate(accountStats.lastPasswordChange)}</p>
                  </div>
                </div>

                {/* Two Factor Authentication */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Two-Factor Authentication</h3>
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                    <div className="flex items-start space-x-3">
                      <AlertTriangle size={20} className="text-yellow-600 mt-0.5" />
                      <div className="flex-1">
                        <h4 className="font-medium text-yellow-800">Enhanced Security Required</h4>
                        <p className="text-sm text-yellow-700 mt-1">
                          Two-factor authentication is strongly recommended for crypto trading platforms.
                        </p>
                        <div className="mt-3 space-y-2">
                          <button className="block px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg text-sm transition-colors duration-200">
                            {settings.security.twoFactorEnabled ? 'Disable 2FA' : 'Enable 2FA'}
                          </button>
                          <p className="text-xs text-yellow-700">
                            Status: {settings.security.twoFactorEnabled ? 'Enabled' : 'Disabled'}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Login Security Settings */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Login Security</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Shield size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Login Alerts</p>
                          <p className="text-sm text-gray-500">Get email notifications for new login attempts</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.security.loginAlerts}
                          onChange={(e) => handleSettingChange('security', 'loginAlerts', e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Clock size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Session Timeout</p>
                          <p className="text-sm text-gray-500">Automatically log out after inactivity</p>
                        </div>
                      </div>
                      <select
                        value={settings.security.sessionTimeout}
                        onChange={(e) => handleSettingChange('security', 'sessionTimeout', parseInt(e.target.value))}
                        className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value={15}>15 minutes</option>
                        <option value={30}>30 minutes</option>
                        <option value={60}>1 hour</option>
                        <option value={120}>2 hours</option>
                        <option value={480}>8 hours</option>
                        <option value={1440}>24 hours</option>
                        <option value={0}>Never</option>
                      </select>
                    </div>

                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Globe size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">IP Address Restriction</p>
                          <p className="text-sm text-gray-500">Only allow login from whitelisted IP addresses</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.security.ipRestrictionEnabled}
                          onChange={(e) => handleSettingChange('security', 'ipRestrictionEnabled', e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between py-3">
                      <div className="flex items-center space-x-3">
                        <Lock size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Auto-Lock Account</p>
                          <p className="text-sm text-gray-500">Lock account automatically after inactivity</p>
                        </div>
                      </div>
                      <select
                        value={settings.security.autoLockDuration}
                        onChange={(e) => handleSettingChange('security', 'autoLockDuration', parseInt(e.target.value))}
                        className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value={5}>5 minutes</option>
                        <option value={15}>15 minutes</option>
                        <option value={30}>30 minutes</option>
                        <option value={60}>1 hour</option>
                        <option value={120}>2 hours</option>
                        <option value={0}>Never</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Current Login Sessions */}
                <div className="mb-8">
                  <div className="flex items-center justify-between mb-4">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900">Current Sessions</h3>
                      <p className="text-sm text-gray-500">Active login sessions across all devices</p>
                    </div>
                    <button className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm transition-colors duration-200">
                      End All Other Sessions
                    </button>
                  </div>
                  
                  <div className="space-y-3">
                    {activeSessions.slice(0, 3).map((session) => {
                      const DeviceIcon = getDeviceIcon(session.device);
                      return (
                        <div key={session.id} className={`border rounded-lg p-4 ${
                          session.current ? 'border-green-200 bg-green-50' : 'border-gray-200'
                        }`}>
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-3">
                              <div className={`p-2 rounded-lg ${
                                session.current ? 'bg-green-100' : 'bg-gray-100'
                              }`}>
                                <DeviceIcon size={16} className={`${
                                  session.current ? 'text-green-600' : 'text-gray-600'
                                }`} />
                              </div>
                              <div>
                                <div className="flex items-center space-x-2">
                                  <h4 className="font-medium text-gray-900 text-sm">
                                    {session.device} - {session.browser}
                                  </h4>
                                  {session.current && (
                                    <span className="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">
                                      Current
                                    </span>
                                  )}
                                </div>
                                <div className="flex items-center space-x-3 text-xs text-gray-500 mt-1">
                                  <span>{session.location}</span>
                                  <span>{session.ip}</span>
                                  <span>Active {formatDate(session.lastActive)}</span>
                                </div>
                              </div>
                            </div>
                            {!session.current && (
                              <button
                                onClick={() => handleRevokeSession(session.id)}
                                className="px-3 py-1 bg-red-100 hover:bg-red-200 text-red-700 rounded text-xs transition-colors duration-200"
                              >
                                End Session
                              </button>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                  <div className="mt-3 text-center">
                    <button 
                      onClick={() => setActiveTab('sessions')}
                      className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                    >
                      View All Sessions
                    </button>
                  </div>
                </div>

                {/* Recent Login Activity */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Recent Login Activity</h3>
                  <div className="space-y-3">
                    {loginHistory.slice(0, 5).map((login) => (
                      <div key={login.id} className="flex items-center justify-between py-3 border-b border-gray-100">
                        <div className="flex items-center space-x-3">
                          <div className={`w-3 h-3 rounded-full ${
                            login.status === 'success' ? 'bg-green-500' : 'bg-red-500'
                          }`}></div>
                          <div>
                            <p className="text-sm font-medium text-gray-900">{login.device}</p>
                            <p className="text-xs text-gray-500">
                              {login.location} • {login.ip}
                            </p>
                          </div>
                        </div>
                        <div className="text-right">
                          <p className="text-sm text-gray-600">{formatDate(login.timestamp)}</p>
                          <span className={`text-xs px-2 py-1 rounded-full ${
                            login.status === 'success'
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {login.status}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Account Recovery */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Account Recovery</h3>
                  <div className="space-y-4">
                    <div className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-start space-x-3">
                        <div className="p-2 bg-blue-100 rounded-lg">
                          <Key size={16} className="text-blue-600" />
                        </div>
                        <div className="flex-1">
                          <h4 className="font-medium text-gray-900 mb-2">Backup Codes</h4>
                          <p className="text-sm text-gray-500 mb-3">
                            Generate backup codes to access your account if you lose your 2FA device.
                          </p>
                          <button className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg text-sm transition-colors duration-200">
                            Generate Backup Codes
                          </button>
                        </div>
                      </div>
                    </div>

                    <div className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-start space-x-3">
                        <div className="p-2 bg-orange-100 rounded-lg">
                          <User size={16} className="text-orange-600" />
                        </div>
                        <div className="flex-1">
                          <h4 className="font-medium text-gray-900 mb-2">Emergency Contact Access</h4>
                          <p className="text-sm text-gray-500 mb-3">
                            Allow emergency contact to request account recovery on your behalf.
                          </p>
                          <label className="relative inline-flex items-center cursor-pointer">
                            <input
                              type="checkbox"
                              checked={settings.security.emergencyContactsEnabled}
                              onChange={(e) => handleSettingChange('security', 'emergencyContactsEnabled', e.target.checked)}
                              className="sr-only peer"
                            />
                            <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                            <span className="ml-3 text-sm text-gray-700">
                              {settings.security.emergencyContactsEnabled ? 'Enabled' : 'Disabled'}
                            </span>
                          </label>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Login Preferences */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Login Preferences</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="border border-gray-200 rounded-lg p-4">
                      <h4 className="font-medium text-gray-900 mb-3">Remember Device</h4>
                      <p className="text-sm text-gray-500 mb-4">
                        Skip 2FA verification on trusted devices for 30 days.
                      </p>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          defaultChecked={true}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                        <span className="ml-3 text-sm text-gray-700">Enable for this device</span>
                      </label>
                    </div>

                    <div className="border border-gray-200 rounded-lg p-4">
                      <h4 className="font-medium text-gray-900 mb-3">Login Notifications</h4>
                      <p className="text-sm text-gray-500 mb-4">
                        Get notified immediately when someone logs into your account.
                      </p>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.security.loginAlerts}
                          onChange={(e) => handleSettingChange('security', 'loginAlerts', e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                        <span className="ml-3 text-sm text-gray-700">
                          {settings.security.loginAlerts ? 'Enabled' : 'Disabled'}
                        </span>
                      </label>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Notifications Tab */}
          {activeTab === 'notifications' && (
            <div className="space-y-6">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 mb-4">Notification Preferences</h2>
                
                {/* Email Notifications */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between py-3 border-b border-gray-100">
                    <div className="flex items-center space-x-3">
                      <Mail size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">Email Notifications</p>
                        <p className="text-sm text-gray-500">Receive notifications via email</p>
                      </div>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.notifications.emailNotifications}
                        onChange={(e) => handleSettingChange('notifications', 'emailNotifications', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between py-3 border-b border-gray-100">
                    <div className="flex items-center space-x-3">
                      <Bell size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">Push Notifications</p>
                        <p className="text-sm text-gray-500">Receive browser push notifications</p>
                      </div>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.notifications.pushNotifications}
                        onChange={(e) => handleSettingChange('notifications', 'pushNotifications', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between py-3 border-b border-gray-100">
                    <div className="flex items-center space-x-3">
                      <Shield size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">Security Alerts</p>
                        <p className="text-sm text-gray-500">Important security notifications</p>
                      </div>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.notifications.securityAlerts}
                        onChange={(e) => handleSettingChange('notifications', 'securityAlerts', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between py-3 border-b border-gray-100">
                    <div className="flex items-center space-x-3">
                      <User size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">User Activities</p>
                        <p className="text-sm text-gray-500">Notifications about user registrations and activities</p>
                      </div>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.notifications.userActivities}
                        onChange={(e) => handleSettingChange('notifications', 'userActivities', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between py-3">
                    <div className="flex items-center space-x-3">
                      <CheckCircle size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">KYC Alerts</p>
                        <p className="text-sm text-gray-500">Notifications for KYC/AML review updates</p>
                      </div>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.notifications.kycAlerts}
                        onChange={(e) => handleSettingChange('notifications', 'kycAlerts', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Security Tab */}
          {activeTab === 'security' && (
            <div className="space-y-6">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 mb-6">Security & Crypto Settings</h2>

                {/* Transaction Security */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Transaction Security</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <CheckCircle size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Transaction Confirmation</p>
                          <p className="text-sm text-gray-500">Require email confirmation for all transactions</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.security.transactionConfirmation}
                          onChange={(e) => handleSettingChange('security', 'transactionConfirmation', e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Lock size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Password for Transactions</p>
                          <p className="text-sm text-gray-500">Require password confirmation for crypto transactions</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.security.requirePasswordForTransactions}
                          onChange={(e) => handleSettingChange('security', 'requirePasswordForTransactions', e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Mail size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Transaction Email Alerts</p>
                          <p className="text-sm text-gray-500">Email notifications for all crypto transactions</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.security.transactionEmailAlerts}
                          onChange={(e) => handleSettingChange('security', 'transactionEmailAlerts', e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between py-3">
                      <div className="flex items-center space-x-3">
                        <DollarSign size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Large Transaction Threshold</p>
                          <p className="text-sm text-gray-500">Alert threshold for large transactions (USD)</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="text-sm text-gray-500">$</span>
                        <input
                          type="number"
                          value={settings.security.largeTransactionThreshold}
                          onChange={(e) => handleSettingChange('security', 'largeTransactionThreshold', parseInt(e.target.value))}
                          className="w-24 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          min="0"
                          step="100"
                        />
                      </div>
                    </div>
                  </div>
                </div>

                {/* Withdrawal Limits */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Withdrawal Limits</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Daily Limit (USD)
                      </label>
                      <div className="relative">
                        <DollarSign size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="number"
                          value={settings.security.withdrawalLimits.daily}
                          onChange={(e) => handleSettingChange('security', 'withdrawalLimits', {
                            ...settings.security.withdrawalLimits,
                            daily: parseInt(e.target.value)
                          })}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          min="0"
                          step="1000"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Monthly Limit (USD)
                      </label>
                      <div className="relative">
                        <DollarSign size={16} className="absolute left-3 top-3 text-gray-400" />
                        <input
                          type="number"
                          value={settings.security.withdrawalLimits.monthly}
                          onChange={(e) => handleSettingChange('security', 'withdrawalLimits', {
                            ...settings.security.withdrawalLimits,
                            monthly: parseInt(e.target.value)
                          })}
                          className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          min="0"
                          step="5000"
                        />
                      </div>
                    </div>
                  </div>
                </div>

                {/* Crypto Wallet Security */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Crypto Wallet Security</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Database size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Cold Storage</p>
                          <p className="text-sm text-gray-500">Store majority of funds in offline cold storage</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.security.coldStorageEnabled}
                          onChange={(e) => handleSettingChange('security', 'coldStorageEnabled', e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Key size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Multi-Signature Required</p>
                          <p className="text-sm text-gray-500">Require multiple signatures for large transactions</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.security.multiSigRequired}
                          onChange={(e) => handleSettingChange('security', 'multiSigRequired', e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Zap size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Hardware Wallet Required</p>
                          <p className="text-sm text-gray-500">Require hardware wallet for withdrawals</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.security.hardwareWalletRequired}
                          onChange={(e) => handleSettingChange('security', 'hardwareWalletRequired', e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between py-3">
                      <div className="flex items-center space-x-3">
                        <Clock size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Time-Lock Withdrawals</p>
                          <p className="text-sm text-gray-500">Add time delay to withdrawal requests</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.security.timeLockEnabled}
                          onChange={(e) => handleSettingChange('security', 'timeLockEnabled', e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>
                  </div>
                </div>

                {/* Whitelisted Addresses */}
                <div className="mb-8">
                  <div className="flex items-center justify-between mb-4">
                    <div>
                      <h3 className="text-lg font-medium text-gray-900">Whitelisted Addresses</h3>
                      <p className="text-sm text-gray-500">Only allow withdrawals to these trusted addresses</p>
                    </div>
                    <button className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors duration-200">
                      Add Address
                    </button>
                  </div>
                  
                  <div className="space-y-3">
                    {whitelistedAddresses.map((address) => (
                      <div key={address.id} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-3">
                            <div className="p-2 bg-green-100 rounded-lg">
                              <CheckCircle size={16} className="text-green-600" />
                            </div>
                            <div>
                              <h4 className="font-medium text-gray-900">{address.label}</h4>
                              <p className="text-sm text-gray-500 font-mono">{address.address}</p>
                              <div className="flex items-center space-x-4 text-xs text-gray-500 mt-1">
                                <span className="flex items-center space-x-1">
                                  <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                                  <span>{address.asset}</span>
                                </span>
                                <span>Added {formatDate(address.dateAdded)}</span>
                                <span>Last used {formatDate(address.lastUsed)}</span>
                              </div>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <button
                              className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-200"
                              title="Edit Address"
                            >
                              <Edit3 size={16} />
                            </button>
                            <button
                              className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-lg transition-colors duration-200"
                              title="Remove Address"
                            >
                              <Trash2 size={16} />
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Recent Transaction History */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Recent Transaction History</h3>
                  <div className="space-y-3">
                    {transactionHistory.slice(0, 5).map((tx) => (
                      <div key={tx.id} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-3">
                            <div className={`p-2 rounded-lg ${
                              tx.type === 'deposit' ? 'bg-green-100' :
                              tx.type === 'withdrawal' ? 'bg-red-100' :
                              'bg-blue-100'
                            }`}>
                              {tx.type === 'deposit' ? <Download size={16} className="text-green-600" /> :
                               tx.type === 'withdrawal' ? <Upload size={16} className="text-red-600" /> :
                               <RefreshCw size={16} className="text-blue-600" />}
                            </div>
                            <div>
                              <div className="flex items-center space-x-2">
                                <h4 className="font-medium text-gray-900 capitalize">{tx.type}</h4>
                                <span className="text-sm font-medium text-gray-700">
                                  {tx.amount} {tx.asset}
                                </span>
                                <span className="text-sm text-gray-500">
                                  (${tx.value.toLocaleString()})
                                </span>
                              </div>
                              <div className="flex items-center space-x-4 text-xs text-gray-500 mt-1">
                                <span>{formatDate(tx.timestamp)}</span>
                                {tx.txHash && tx.txHash !== 'internal_trade_567' && (
                                  <span className="flex items-center space-x-1">
                                    <span>Hash:</span>
                                    <code className="font-mono">{tx.txHash}</code>
                                  </span>
                                )}
                                {tx.confirmations !== null && (
                                  <span>{tx.confirmations} confirmations</span>
                                )}
                              </div>
                            </div>
                          </div>
                          <div className="text-right">
                            <span className={`px-2 py-1 text-xs rounded-full ${
                              tx.status === 'completed' ? 'bg-green-100 text-green-800' :
                              tx.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-red-100 text-red-800'
                            }`}>
                              {tx.status}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                  <div className="mt-4 text-center">
                    <button className="text-blue-600 hover:text-blue-700 text-sm font-medium">
                      View All Transactions
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Privacy Tab */}
          {activeTab === 'privacy' && (
            <div className="space-y-6">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 mb-4">Privacy & Data Control</h2>
                
                {/* Account Statistics */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center space-x-3">
                      <Activity size={20} className="text-blue-600" />
                      <div>
                        <p className="text-sm font-medium text-blue-900">Total Logins</p>
                        <p className="text-lg font-bold text-blue-600">{accountStats.totalLogins.toLocaleString()}</p>
                      </div>
                    </div>
                  </div>
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <div className="flex items-center space-x-3">
                      <Calendar size={20} className="text-green-600" />
                      <div>
                        <p className="text-sm font-medium text-green-900">Account Age</p>
                        <p className="text-lg font-bold text-green-600">{accountStats.accountAge} days</p>
                      </div>
                    </div>
                  </div>
                  <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                    <div className="flex items-center space-x-3">
                      <Database size={20} className="text-purple-600" />
                      <div>
                        <p className="text-sm font-medium text-purple-900">Storage Used</p>
                        <p className="text-lg font-bold text-purple-600">{formatBytes(accountStats.storageUsed)}</p>
                      </div>
                    </div>
                  </div>
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                    <div className="flex items-center space-x-3">
                      <Download size={20} className="text-orange-600" />
                      <div>
                        <p className="text-sm font-medium text-orange-900">Data Exports</p>
                        <p className="text-lg font-bold text-orange-600">{accountStats.dataExported}</p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Data Controls */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between py-4 border-b border-gray-100">
                    <div className="flex items-center space-x-3">
                      <Download size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">Download My Data</p>
                        <p className="text-sm text-gray-500">Export all your account data in JSON format</p>
                      </div>
                    </div>
                    <button className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors duration-200">
                      Request Export
                    </button>
                  </div>

                  <div className="flex items-center justify-between py-4 border-b border-gray-100">
                    <div className="flex items-center space-x-3">
                      <Trash2 size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">Delete Account</p>
                        <p className="text-sm text-gray-500">Permanently delete your account and all associated data</p>
                      </div>
                    </div>
                    <button className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm transition-colors duration-200">
                      Delete Account
                    </button>
                  </div>

                  <div className="flex items-center justify-between py-4">
                    <div className="flex items-center space-x-3">
                      <RefreshCw size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">Clear Activity History</p>
                        <p className="text-sm text-gray-500">Remove all login history and session data</p>
                      </div>
                    </div>
                    <button className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg text-sm transition-colors duration-200">
                      Clear History
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* API Keys Tab */}
          {activeTab === 'api' && (
            <div className="space-y-6">
              <div>
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-semibold text-gray-900">API Keys</h2>
                  <button className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors duration-200">
                    <Key size={16} className="inline mr-2" />
                    Generate New Key
                  </button>
                </div>
                
                {/* API Keys List */}
                <div className="space-y-4">
                  {apiKeys.map((apiKey) => (
                    <div key={apiKey.id} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center space-x-3">
                          <Key size={16} className="text-gray-500" />
                          <div>
                            <h3 className="font-medium text-gray-900">{apiKey.name}</h3>
                            <div className="flex items-center space-x-4 text-sm text-gray-500">
                              <span>Created {formatDate(apiKey.created)}</span>
                              <span>Last used {formatDate(apiKey.lastUsed)}</span>
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => handleCopyApiKey(apiKey.key)}
                            className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors duration-200"
                            title="Copy API Key"
                          >
                            {copiedKey === apiKey.key ? <Check size={16} className="text-green-600" /> : <Copy size={16} />}
                          </button>
                          <button
                            onClick={() => handleDeleteApiKey(apiKey.id)}
                            className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-lg transition-colors duration-200"
                            title="Delete API Key"
                          >
                            <Trash2 size={16} />
                          </button>
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 rounded-lg p-3 mb-3">
                        <div className="flex items-center space-x-2">
                          <code className="flex-1 text-sm font-mono text-gray-700">{apiKey.key}</code>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-4">
                        <div className="flex items-center space-x-2">
                          <span className="text-sm font-medium text-gray-700">Permissions:</span>
                          {apiKey.permissions.map((permission) => (
                            <span
                              key={permission}
                              className={`px-2 py-1 text-xs rounded-full ${
                                permission === 'write'
                                  ? 'bg-yellow-100 text-yellow-800'
                                  : 'bg-green-100 text-green-800'
                              }`}
                            >
                              {permission}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Statements Tab */}
          {activeTab === 'statements' && (
            <div className="space-y-6">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 mb-6">Account Statements</h2>
                
                {/* Custom Statement Generation */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Custom Statement Generation</h3>
                  <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Statement Type
                        </label>
                        <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                          <option value="">Select statement type</option>
                          <option value="transactions">Transaction History</option>
                          <option value="trades">Trading Activity</option>
                          <option value="deposits">Deposits & Withdrawals</option>
                          <option value="balances">Account Balances</option>
                          <option value="performance">Portfolio Performance</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Date Range
                        </label>
                        <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                          <option value="last_30">Last 30 days</option>
                          <option value="last_90">Last 90 days</option>
                          <option value="current_month">Current month</option>
                          <option value="last_month">Last month</option>
                          <option value="current_quarter">Current quarter</option>
                          <option value="last_quarter">Last quarter</option>
                          <option value="current_year">Current year</option>
                          <option value="last_year">Last year</option>
                          <option value="custom">Custom range</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Format
                        </label>
                        <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                          <option value="pdf">PDF Document</option>
                          <option value="csv">CSV Spreadsheet</option>
                          <option value="xlsx">Excel Workbook</option>
                          <option value="json">JSON Data</option>
                        </select>
                      </div>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <label className="flex items-center space-x-2 cursor-pointer">
                          <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" defaultChecked />
                          <span className="text-sm text-gray-700">Include transaction details</span>
                        </label>
                        <label className="flex items-center space-x-2 cursor-pointer">
                          <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
                          <span className="text-sm text-gray-700">Include market data</span>
                        </label>
                        <label className="flex items-center space-x-2 cursor-pointer">
                          <input type="checkbox" className="rounded border-gray-300 text-blue-600 focus:ring-blue-500" />
                          <span className="text-sm text-gray-700">Include charts</span>
                        </label>
                      </div>
                      <button
                        className="px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm font-medium transition-colors duration-200 flex items-center space-x-2"
                        onClick={() => alert('Generating custom statement... (Functionality to be implemented)')}
                      >
                        <FilePlus size={16} />
                        <span>Generate Statement</span>
                      </button>
                    </div>
                  </div>
                </div>
                
                {/* Pre-defined Statement Downloads */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Pre-defined Statements</h3>
                  <div className="space-y-4">
                  {[
                    { 
                      id: 'monthly', 
                      label: 'Monthly Statements', 
                      description: 'Download detailed monthly account statements in PDF format.',
                      icon: FileText,
                      color: 'blue',
                      format: 'PDF'
                    },
                    { 
                      id: 'tax', 
                      label: 'Tax Documents', 
                      description: 'Access your annual tax reports and forms (1099-B, 8949).',
                      icon: Receipt,
                      color: 'green',
                      format: 'PDF'
                    },
                    { 
                      id: 'transaction', 
                      label: 'Transaction History', 
                      description: 'Download your complete transaction history with all trades and transfers.',
                      icon: Database,
                      color: 'purple',
                      format: 'CSV'
                    },
                    { 
                      id: 'audit', 
                      label: 'Audit Reports', 
                      description: 'Download detailed audit reports for compliance and regulatory purposes.',
                      icon: FileCheck,
                      color: 'orange',
                      format: 'PDF'
                    },
                    { 
                      id: 'portfolio', 
                      label: 'Portfolio Statements', 
                      description: 'Comprehensive portfolio performance and holdings reports.',
                      icon: BarChart3,
                      color: 'indigo',
                      format: 'PDF'
                    },
                    { 
                      id: 'activity', 
                      label: 'Activity Reports', 
                      description: 'Complete log of all account activities and security events.',
                      icon: Activity,
                      color: 'pink',
                      format: 'CSV'
                    }
                  ].map((statement) => {
                    const IconComponent = statement.icon;
                    const colorClasses = {
                      blue: 'bg-blue-50 border-blue-200 text-blue-800',
                      green: 'bg-green-50 border-green-200 text-green-800',
                      purple: 'bg-purple-50 border-purple-200 text-purple-800',
                      orange: 'bg-orange-50 border-orange-200 text-orange-800',
                      indigo: 'bg-indigo-50 border-indigo-200 text-indigo-800',
                      pink: 'bg-pink-50 border-pink-200 text-pink-800'
                    };
                    const iconClasses = {
                      blue: 'text-blue-600',
                      green: 'text-green-600',
                      purple: 'text-purple-600',
                      orange: 'text-orange-600',
                      indigo: 'text-indigo-600',
                      pink: 'text-pink-600'
                    };
                    const buttonClasses = {
                      blue: 'bg-blue-600 hover:bg-blue-700',
                      green: 'bg-green-600 hover:bg-green-700',
                      purple: 'bg-purple-600 hover:bg-purple-700',
                      orange: 'bg-orange-600 hover:bg-orange-700',
                      indigo: 'bg-indigo-600 hover:bg-indigo-700',
                      pink: 'bg-pink-600 hover:bg-pink-700'
                    };
                    
                    return (
                      <div key={statement.id} className="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow duration-200">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-4">
                            <div className={`p-3 rounded-lg border ${colorClasses[statement.color]}`}>
                              <IconComponent size={24} className={iconClasses[statement.color]} />
                            </div>
                            <div className="flex-1">
                              <h3 className="text-lg font-semibold text-gray-900 mb-1">{statement.label}</h3>
                              <p className="text-gray-600 text-sm leading-relaxed">{statement.description}</p>
                              <div className="flex items-center space-x-4 mt-2">
                                <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                                  Format: {statement.format}
                                </span>
                                <span className="text-xs text-gray-500">
                                  Last generated: {formatDate(new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString())}
                                </span>
                              </div>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            {statement.format === 'CSV' && (
                              <button
                                onClick={() => alert(`Previewing ${statement.label}... (Functionality to be implemented)`)}
                                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 text-sm transition-colors duration-200 flex items-center space-x-2"
                              >
                                <Eye size={16} />
                                <span>Preview</span>
                              </button>
                            )}
                            <button
                              onClick={() => alert(`Generating and downloading ${statement.label}... (Functionality to be implemented)`)}
                              className={`px-4 py-2 ${buttonClasses[statement.color]} text-white rounded-lg text-sm transition-colors duration-200 flex items-center space-x-2`}
                            >
                              <Download size={16} />
                              <span>Download</span>
                            </button>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
                
                {/* Recent Downloads */}
                <div className="mt-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Recent Downloads</h3>
                  <div className="space-y-3">
                    {[
                      {
                        id: '1',
                        name: 'December 2024 Monthly Statement',
                        type: 'Monthly Statement',
                        format: 'PDF',
                        size: '1.2 MB',
                        downloadDate: '2024-01-15T10:30:00Z',
                        status: 'completed'
                      },
                      {
                        id: '2',
                        name: 'Q4 2024 Transaction History',
                        type: 'Transaction History',
                        format: 'CSV',
                        size: '847 KB',
                        downloadDate: '2024-01-14T16:20:00Z',
                        status: 'completed'
                      },
                      {
                        id: '3',
                        name: 'Tax Documents 2024',
                        type: 'Tax Documents',
                        format: 'PDF',
                        size: '2.8 MB',
                        downloadDate: '2024-01-13T09:15:00Z',
                        status: 'generating'
                      },
                      {
                        id: '4',
                        name: 'Portfolio Performance Report',
                        type: 'Portfolio Statement',
                        format: 'PDF',
                        size: '1.5 MB',
                        downloadDate: '2024-01-12T14:45:00Z',
                        status: 'expired'
                      }
                    ].map((download) => (
                      <div key={download.id} className="flex items-center justify-between py-3 border border-gray-200 rounded-lg px-4">
                        <div className="flex items-center space-x-3">
                          <div className={`p-2 rounded-lg ${
                            download.status === 'completed' ? 'bg-green-100' :
                            download.status === 'generating' ? 'bg-yellow-100' :
                            'bg-gray-100'
                          }`}>
                            <FileText size={16} className={`${
                              download.status === 'completed' ? 'text-green-600' :
                              download.status === 'generating' ? 'text-yellow-600' :
                              'text-gray-600'
                            }`} />
                          </div>
                          <div>
                            <h4 className="font-medium text-gray-900">{download.name}</h4>
                            <div className="flex items-center space-x-4 text-sm text-gray-500">
                              <span>{download.type}</span>
                              <span>{download.format}</span>
                              <span>{download.size}</span>
                              <span>Generated {formatDate(download.downloadDate)}</span>
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            download.status === 'completed' ? 'bg-green-100 text-green-800' :
                            download.status === 'generating' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {download.status}
                          </span>
                          {download.status === 'completed' && (
                            <button
                              className="p-2 text-blue-600 hover:text-blue-700 hover:bg-blue-50 rounded-lg transition-colors duration-200"
                              title="Download Again"
                              onClick={() => alert(`Re-downloading ${download.name}... (Functionality to be implemented)`)}
                            >
                              <Download size={16} />
                            </button>
                          )}
                          {download.status === 'generating' && (
                            <button
                              className="p-2 text-gray-400 cursor-not-allowed"
                              title="Still generating"
                            >
                              <RefreshCw size={16} className="animate-spin" />
                            </button>
                          )}
                          {download.status === 'expired' && (
                            <button
                              className="p-2 text-orange-600 hover:text-orange-700 hover:bg-orange-50 rounded-lg transition-colors duration-200"
                              title="Regenerate"
                              onClick={() => alert(`Regenerating ${download.name}... (Functionality to be implemented)`)}
                            >
                              <RefreshCw size={16} />
                            </button>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Activity Log Tab */}
          {activeTab === 'sessions' && (
            <div className="space-y-6">
              <div>
                <div className="flex items-center justify-between mb-6">
                  <div>
                    <h2 className="text-xl font-semibold text-gray-900">Comprehensive Activity Log</h2>
                    <p className="text-gray-600 text-sm mt-1">Complete history of all user actions, transactions, and account changes</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors duration-200">
                      <Download size={16} className="inline mr-2" />
                      Export CSV
                    </button>
                    <button className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors duration-200">
                      <RefreshCw size={16} className="inline mr-2" />
                      Refresh
                    </button>
                  </div>
                </div>

                {/* Activity Statistics */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center space-x-3">
                      <TrendingUp size={20} className="text-blue-600" />
                      <div>
                        <p className="text-sm font-medium text-blue-900">Total Activities</p>
                        <p className="text-lg font-bold text-blue-600">{activityLog.length.toLocaleString()}</p>
                      </div>
                    </div>
                  </div>
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <div className="flex items-center space-x-3">
                      <BarChart3 size={20} className="text-green-600" />
                      <div>
                        <p className="text-sm font-medium text-green-900">Trading Actions</p>
                        <p className="text-lg font-bold text-green-600">{activityLog.filter(a => a.category === 'trading').length}</p>
                      </div>
                    </div>
                  </div>
                  <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                    <div className="flex items-center space-x-3">
                      <DollarSign size={20} className="text-purple-600" />
                      <div>
                        <p className="text-sm font-medium text-purple-900">Financial Actions</p>
                        <p className="text-lg font-bold text-purple-600">{activityLog.filter(a => a.category === 'financial').length}</p>
                      </div>
                    </div>
                  </div>
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                    <div className="flex items-center space-x-3">
                      <Shield size={20} className="text-orange-600" />
                      <div>
                        <p className="text-sm font-medium text-orange-900">Security Events</p>
                        <p className="text-lg font-bold text-orange-600">{activityLog.filter(a => a.category === 'authentication').length}</p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Activity Filter Tabs */}
                <div className="flex flex-wrap gap-2 mb-6">
                  {['all', 'trading', 'financial', 'authentication', 'account', 'social', 'billing'].map((filter) => (
                    <button
                      key={filter}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 ${
                        filter === 'all'
                          ? 'bg-gray-600 text-white'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      {filter === 'all' ? 'All Activities' : filter.charAt(0).toUpperCase() + filter.slice(1)}
                    </button>
                  ))}
                </div>

                {/* Activity Log List */}
                <div className="space-y-3">
                  {activityLog.map((activity) => {
                    const getActivityIcon = () => {
                      switch (activity.type) {
                        case 'buy': return <TrendingUp size={16} className="text-green-600" />;
                        case 'sell': return <TrendingUp size={16} className="text-red-600 transform rotate-180" />;
                        case 'trade': return <RefreshCw size={16} className="text-blue-600" />;
                        case 'withdrawal': return <Upload size={16} className="text-red-600" />;
                        case 'deposit': return <Download size={16} className="text-green-600" />;
                        case 'login': return <Lock size={16} className="text-blue-600" />;
                        case 'logout': return <Unlock size={16} className="text-gray-600" />;
                        case 'settings_change': return <Settings size={16} className="text-orange-600" />;
                        case 'like': return <Star size={16} className="text-yellow-600" />;
                        case 'charge': return <CreditCard size={16} className="text-purple-600" />;
                        default: return <Activity size={16} className="text-gray-600" />;
                      }
                    };

                    const getCategoryColor = (category) => {
                      switch (category) {
                        case 'trading': return 'border-l-blue-500';
                        case 'financial': return 'border-l-green-500';
                        case 'authentication': return 'border-l-orange-500';
                        case 'account': return 'border-l-purple-500';
                        case 'social': return 'border-l-pink-500';
                        case 'billing': return 'border-l-yellow-500';
                        default: return 'border-l-gray-500';
                      }
                    };

                    return (
                      <div
                        key={activity.id}
                        className={`border-l-4 ${getCategoryColor(activity.category)} bg-white rounded-lg shadow-sm border border-gray-200 p-4 hover:shadow-md transition-shadow duration-200`}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex items-start space-x-3 flex-1">
                            <div className="p-2 bg-gray-50 rounded-lg">
                              {getActivityIcon()}
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center space-x-2 mb-2">
                                <h4 className="font-semibold text-gray-900">{activity.description}</h4>
                                <span className={`px-2 py-1 text-xs rounded-full ${
                                  activity.status === 'completed' || activity.status === 'success' ? 'bg-green-100 text-green-800' :
                                  activity.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                  activity.status === 'failed' ? 'bg-red-100 text-red-800' :
                                  'bg-gray-100 text-gray-800'
                                }`}>
                                  {activity.status}
                                </span>
                                <span className="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                                  {activity.category}
                                </span>
                              </div>
                              
                              {/* Activity Details */}
                              <div className="text-sm text-gray-600 mb-3">
                                {activity.type === 'buy' || activity.type === 'sell' ? (
                                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                    <div><strong>Asset:</strong> {activity.details.asset}</div>
                                    <div><strong>Amount:</strong> {activity.details.amount.toLocaleString()}</div>
                                    <div><strong>Price:</strong> ${activity.details.price.toLocaleString()}</div>
                                    <div><strong>Total:</strong> ${activity.details.totalValue.toLocaleString()}</div>
                                    <div><strong>Order Type:</strong> {activity.details.orderType}</div>
                                    <div><strong>Order ID:</strong> {activity.details.orderId}</div>
                                  </div>
                                ) : activity.type === 'withdrawal' || activity.type === 'deposit' ? (
                                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                                    <div><strong>Asset:</strong> {activity.details.asset}</div>
                                    <div><strong>Amount:</strong> {activity.details.amount.toLocaleString()}</div>
                                    <div><strong>Address:</strong> <code className="text-xs">{activity.details.address || activity.details.fromAddress}</code></div>
                                    {activity.details.txHash && (
                                      <div><strong>TX Hash:</strong> <code className="text-xs">{activity.details.txHash}</code></div>
                                    )}
                                    {activity.details.confirmations !== undefined && (
                                      <div><strong>Confirmations:</strong> {activity.details.confirmations}</div>
                                    )}
                                    {activity.details.fee && (
                                      <div><strong>Fee:</strong> {activity.details.fee} {activity.details.asset}</div>
                                    )}
                                  </div>
                                ) : activity.type === 'trade' ? (
                                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                    <div><strong>From:</strong> {activity.details.fromAmount} {activity.details.fromAsset}</div>
                                    <div><strong>To:</strong> {activity.details.toAmount} {activity.details.toAsset}</div>
                                    <div><strong>Rate:</strong> ${activity.details.rate.toLocaleString()}</div>
                                    <div><strong>Slippage:</strong> {activity.details.slippage}%</div>
                                    <div><strong>Trade ID:</strong> {activity.details.tradeId}</div>
                                  </div>
                                ) : activity.type === 'login' || activity.type === 'logout' ? (
                                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                                    <div><strong>Method:</strong> {activity.details.method || 'Standard'}</div>
                                    <div><strong>Session:</strong> <code className="text-xs">{activity.details.sessionId}</code></div>
                                    {activity.details.sessionDuration && (
                                      <div><strong>Duration:</strong> {activity.details.sessionDuration}</div>
                                    )}
                                    {activity.details.failureReason && (
                                      <div><strong>Failure Reason:</strong> {activity.details.failureReason.replace('_', ' ')}</div>
                                    )}
                                    {activity.details.attemptCount && (
                                      <div><strong>Attempts:</strong> {activity.details.attemptCount}</div>
                                    )}
                                  </div>
                                ) : activity.type === 'settings_change' ? (
                                  <div className="space-y-2">
                                    <div><strong>Section:</strong> {activity.details.section}</div>
                                    <div><strong>Changed Fields:</strong> {activity.details.changedFields.join(', ')}</div>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                      <div>
                                        <strong>Previous Values:</strong>
                                        <pre className="text-xs bg-red-50 p-2 rounded mt-1 overflow-x-auto">
                                          {JSON.stringify(activity.details.previousValues, null, 2)}
                                        </pre>
                                      </div>
                                      <div>
                                        <strong>New Values:</strong>
                                        <pre className="text-xs bg-green-50 p-2 rounded mt-1 overflow-x-auto">
                                          {JSON.stringify(activity.details.newValues, null, 2)}
                                        </pre>
                                      </div>
                                    </div>
                                  </div>
                                ) : activity.type === 'like' ? (
                                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                                    <div><strong>Post:</strong> {activity.details.postTitle}</div>
                                    <div><strong>Author:</strong> {activity.details.author}</div>
                                    <div><strong>Content Type:</strong> {activity.details.contentType}</div>
                                    <div><strong>Post ID:</strong> <code className="text-xs">{activity.details.postId}</code></div>
                                  </div>
                                ) : activity.type === 'charge' ? (
                                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                    <div><strong>Amount:</strong> ${activity.details.amount}</div>
                                    <div><strong>Service:</strong> {activity.details.subscription}</div>
                                    <div><strong>Period:</strong> {activity.details.period}</div>
                                    <div><strong>Method:</strong> {activity.details.paymentMethod}</div>
                                    <div><strong>Invoice:</strong> <code className="text-xs">{activity.details.invoiceId}</code></div>
                                  </div>
                                ) : null}
                              </div>
                              
                              {/* Device and Location Info */}
                              <div className="flex items-center space-x-4 text-xs text-gray-500">
                                <span className="flex items-center space-x-1">
                                  <Monitor size={12} />
                                  <span>{activity.device}</span>
                                </span>
                                <span className="flex items-center space-x-1">
                                  <MapPin size={12} />
                                  <span>{activity.location}</span>
                                </span>
                                <span className="flex items-center space-x-1">
                                  <Globe size={12} />
                                  <span>{activity.ip}</span>
                                </span>
                                <span className="flex items-center space-x-1">
                                  <Clock size={12} />
                                  <span>{formatDate(activity.timestamp)}</span>
                                </span>
                              </div>
                            </div>
                          </div>
                          
                          {/* Action Buttons */}
                          <div className="flex items-center space-x-2 ml-4">
                            <button
                              className="p-2 text-gray-500 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors duration-200"
                              title="View Details"
                            >
                              <Eye size={16} />
                            </button>
                            {(activity.type === 'withdrawal' || activity.type === 'deposit') && activity.details.txHash && (
                              <button
                                className="p-2 text-gray-500 hover:text-green-600 hover:bg-green-50 rounded-lg transition-colors duration-200"
                                title="View on Explorer"
                                onClick={() => window.open(`https://explorer.example.com/tx/${activity.details.txHash}`, '_blank')}
                              >
                                <ExternalLink size={16} />
                              </button>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>

                {/* Load More Button */}
                <div className="text-center mt-6">
                  <button className="px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg font-medium transition-colors duration-200">
                    Load More Activities
                  </button>
                </div>

                {/* Active Sessions Summary */}
                <div className="mt-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Active Sessions Summary</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {activeSessions.slice(0, 3).map((session) => {
                      const DeviceIcon = getDeviceIcon(session.device);
                      return (
                        <div key={session.id} className={`border rounded-lg p-4 ${
                          session.current ? 'border-green-200 bg-green-50' : 'border-gray-200'
                        }`}>
                          <div className="flex items-center space-x-3">
                            <div className={`p-2 rounded-lg ${
                              session.current ? 'bg-green-100' : 'bg-gray-100'
                            }`}>
                              <DeviceIcon size={16} className={`${
                                session.current ? 'text-green-600' : 'text-gray-600'
                              }`} />
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center space-x-2">
                                <h4 className="font-medium text-gray-900 text-sm">
                                  {session.device} - {session.browser}
                                </h4>
                                {session.current && (
                                  <span className="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">
                                    Current
                                  </span>
                                )}
                              </div>
                              <div className="text-xs text-gray-500 mt-1">
                                <span>{session.location}</span> • <span>Active {formatDate(session.lastActive)}</span>
                              </div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                  <div className="mt-4 text-center">
                    <button className="text-blue-600 hover:text-blue-700 text-sm font-medium">
                      View All Sessions →
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* KYC/AML Tab */}
          {activeTab === 'kyc' && (
            <div className="space-y-6">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 mb-6">KYC/AML Verification</h2>
                
                {/* KYC Status Overview */}
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
                  <div className="flex items-start justify-between">
                    <div className="flex items-start space-x-4">
                      <div className="p-3 bg-blue-100 rounded-lg">
                        <FileCheck size={24} className="text-blue-600" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-blue-900 mb-2">
                          {getKycLevelLabel(kycStatus.level)}
                        </h3>
                        <div className="space-y-1 text-sm text-blue-800">
                          <p><strong>Status:</strong> {kycStatus.status.replace('_', ' ').replace(/\b\w/g, (l) => l.toUpperCase())}</p>
                          <p><strong>Completed:</strong> {formatDate(kycStatus.completedDate)}</p>
                          <p><strong>Next Review:</strong> {formatDate(kycStatus.nextReviewDate)}</p>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="space-y-2">
                        <div className="text-sm text-blue-800">
                          <p><strong>Withdrawal Limit:</strong> ${kycStatus.withdrawalLimit.toLocaleString()}</p>
                          <p><strong>Trading Limit:</strong> ${kycStatus.tradingLimit.toLocaleString()}</p>
                        </div>
                        {kycStatus.requiresUpdate && (
                          <div className="bg-yellow-100 border border-yellow-300 rounded-lg p-2">
                            <p className="text-xs text-yellow-800 font-medium">Documents require update</p>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Document Upload Areas */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  {/* Government ID Upload */}
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-blue-400 transition-colors duration-200">
                    <div className="text-center">
                      <IdCard size={32} className="mx-auto text-gray-400 mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Government ID</h3>
                      <p className="text-sm text-gray-500 mb-4">Upload front and back of your government-issued ID</p>
                      <div className="space-y-2">
                        <input
                          type="file"
                          accept="image/*,.pdf"
                          multiple
                          onChange={(e) => handleFileUpload(e, 'government_id')}
                          className="hidden"
                          id="government-id-upload"
                        />
                        <label
                          htmlFor="government-id-upload"
                          className="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg cursor-pointer transition-colors duration-200"
                        >
                          <Upload size={16} className="mr-2" />
                          Choose Files
                        </label>
                      </div>
                    </div>
                  </div>

                  {/* Proof of Address Upload */}
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-blue-400 transition-colors duration-200">
                    <div className="text-center">
                      <Building size={32} className="mx-auto text-gray-400 mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Proof of Address</h3>
                      <p className="text-sm text-gray-500 mb-4">Upload utility bill, bank statement, or lease agreement</p>
                      <div className="space-y-2">
                        <input
                          type="file"
                          accept="image/*,.pdf"
                          onChange={(e) => handleFileUpload(e, 'proof_of_address')}
                          className="hidden"
                          id="address-proof-upload"
                        />
                        <label
                          htmlFor="address-proof-upload"
                          className="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg cursor-pointer transition-colors duration-200"
                        >
                          <Upload size={16} className="mr-2" />
                          Choose File
                        </label>
                      </div>
                    </div>
                  </div>

                  {/* Selfie Upload */}
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-blue-400 transition-colors duration-200">
                    <div className="text-center">
                      <Camera size={32} className="mx-auto text-gray-400 mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Identity Selfie</h3>
                      <p className="text-sm text-gray-500 mb-4">Upload a clear selfie for identity verification</p>
                      <div className="space-y-2">
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => handleFileUpload(e, 'selfie')}
                          className="hidden"
                          id="selfie-upload"
                        />
                        <label
                          htmlFor="selfie-upload"
                          className="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg cursor-pointer transition-colors duration-200"
                        >
                          <Upload size={16} className="mr-2" />
                          Choose Photo
                        </label>
                      </div>
                    </div>
                  </div>

                  {/* Bank Statement Upload */}
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-blue-400 transition-colors duration-200">
                    <div className="text-center">
                      <Receipt size={32} className="mx-auto text-gray-400 mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Bank Statement</h3>
                      <p className="text-sm text-gray-500 mb-4">Upload recent bank statement for enhanced verification</p>
                      <div className="space-y-2">
                        <input
                          type="file"
                          accept=".pdf,image/*"
                          onChange={(e) => handleFileUpload(e, 'bank_statement')}
                          className="hidden"
                          id="bank-statement-upload"
                        />
                        <label
                          htmlFor="bank-statement-upload"
                          className="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg cursor-pointer transition-colors duration-200"
                        >
                          <Upload size={16} className="mr-2" />
                          Choose File
                        </label>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Uploaded Documents */}
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Uploaded Documents</h3>
                  <div className="space-y-4">
                    {kycDocuments.map((document) => {
                      const DocumentIcon = getDocumentTypeIcon(document.type);
                      const progress = uploadProgress[document.id];
                      
                      return (
                        <div key={document.id} className="border border-gray-200 rounded-lg p-4">
                          <div className="flex items-start justify-between">
                            <div className="flex items-start space-x-3 flex-1">
                              <div className={`p-2 rounded-lg ${
                                document.status === 'approved' ? 'bg-green-100' :
                                document.status === 'pending' ? 'bg-yellow-100' :
                                document.status === 'rejected' ? 'bg-red-100' :
                                'bg-gray-100'
                              }`}>
                                <DocumentIcon size={16} className={`${
                                  document.status === 'approved' ? 'text-green-600' :
                                  document.status === 'pending' ? 'text-yellow-600' :
                                  document.status === 'rejected' ? 'text-red-600' :
                                  'text-gray-600'
                                }`} />
                              </div>
                              <div className="flex-1">
                                <div className="flex items-center space-x-2 mb-1">
                                  <h4 className="font-medium text-gray-900">{document.name}</h4>
                                  <span className={`px-2 py-1 text-xs rounded-full ${getKycStatusColor(document.status)}`}>
                                    {document.status}
                                  </span>
                                </div>
                                <div className="grid grid-cols-2 gap-4 text-sm text-gray-500 mb-2">
                                  <div>
                                    <p><strong>File:</strong> {document.fileName}</p>
                                    <p><strong>Size:</strong> {formatBytes(document.fileSize)}</p>
                                  </div>
                                  <div>
                                    <p><strong>Uploaded:</strong> {formatDate(document.uploadDate)}</p>
                                    {document.reviewDate && (
                                      <p><strong>Reviewed:</strong> {formatDate(document.reviewDate)}</p>
                                    )}
                                  </div>
                                </div>
                                <p className="text-sm text-gray-600">
                                  <strong>Note:</strong> {document.reviewNote}
                                </p>
                                
                                {/* Upload Progress */}
                                {progress !== undefined && (
                                  <div className="mt-3">
                                    <div className="flex items-center justify-between text-sm mb-1">
                                      <span className="text-gray-600">Uploading...</span>
                                      <span className="text-gray-600">{progress}%</span>
                                    </div>
                                    <div className="w-full bg-gray-200 rounded-full h-2">
                                      <div 
                                        className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                                        style={{ width: `${progress}%` }}
                                      ></div>
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>
                            <div className="flex items-center space-x-2 ml-4">
                              {document.downloadUrl && (
                                <button
                                  onClick={() => handleDownloadDocument(document)}
                                  className="p-2 text-blue-600 hover:text-blue-700 hover:bg-blue-50 rounded-lg transition-colors duration-200"
                                  title="Download Document"
                                >
                                  <Download size={16} />
                                </button>
                              )}
                              {document.status === 'rejected' && (
                                <button
                                  onClick={() => document.querySelector('#government-id-upload')?.click()}
                                  className="p-2 text-green-600 hover:text-green-700 hover:bg-green-50 rounded-lg transition-colors duration-200"
                                  title="Reupload Document"
                                >
                                  <RefreshCw size={16} />
                                </button>
                              )}
                              <button
                                onClick={() => handleDeleteDocument(document.id)}
                                className="p-2 text-red-600 hover:text-red-700 hover:bg-red-50 rounded-lg transition-colors duration-200"
                                title="Delete Document"
                              >
                                <Trash2 size={16} />
                              </button>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* KYC Level Information */}
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Verification Levels</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-3 bg-white rounded-lg border">
                      <div className="flex items-center space-x-3">
                        <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                          <CheckCircle size={16} className="text-green-600" />
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">Level 1 - Basic</p>
                          <p className="text-sm text-gray-500">Email verification only</p>
                        </div>
                      </div>
                      <div className="text-right text-sm text-gray-600">
                        <p>Withdrawal: $1,000/day</p>
                        <p>Trading: $5,000/day</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between p-3 bg-white rounded-lg border">
                      <div className="flex items-center space-x-3">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                          kycStatus.level === 'level_2' || kycStatus.level === 'level_3' 
                            ? 'bg-green-100' : 'bg-gray-100'
                        }`}>
                          {kycStatus.level === 'level_2' || kycStatus.level === 'level_3' ? (
                            <CheckCircle size={16} className="text-green-600" />
                          ) : (
                            <Clock size={16} className="text-gray-400" />
                          )}
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">Level 2 - Intermediate</p>
                          <p className="text-sm text-gray-500">Government ID + Proof of Address</p>
                        </div>
                      </div>
                      <div className="text-right text-sm text-gray-600">
                        <p>Withdrawal: $50,000/day</p>
                        <p>Trading: $100,000/day</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between p-3 bg-white rounded-lg border">
                      <div className="flex items-center space-x-3">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                          kycStatus.level === 'level_3' ? 'bg-green-100' : 'bg-gray-100'
                        }`}>
                          {kycStatus.level === 'level_3' ? (
                            <CheckCircle size={16} className="text-green-600" />
                          ) : (
                            <Clock size={16} className="text-gray-400" />
                          )}
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">Level 3 - Advanced</p>
                          <p className="text-sm text-gray-500">All documents + Enhanced Due Diligence</p>
                        </div>
                      </div>
                      <div className="text-right text-sm text-gray-600">
                        <p>Withdrawal: Unlimited</p>
                        <p>Trading: Unlimited</p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Compliance Downloads */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-4">Compliance Reports</h3>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <FileText size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">KYC Verification Report</p>
                          <p className="text-sm text-gray-500">Complete verification status and documents summary</p>
                        </div>
                      </div>
                      <button className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors duration-200">
                        <Download size={16} className="mr-2" />
                        Download PDF
                      </button>
                    </div>
                    
                    <div className="flex items-center justify-between py-3 border-b border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Gavel size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">AML Compliance Certificate</p>
                          <p className="text-sm text-gray-500">Anti-Money Laundering compliance documentation</p>
                        </div>
                      </div>
                      <button className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors duration-200">
                        <Download size={16} className="mr-2" />
                        Download PDF
                      </button>
                    </div>
                    
                    <div className="flex items-center justify-between py-3">
                      <div className="flex items-center space-x-3">
                        <Users size={16} className="text-gray-500" />
                        <div>
                          <p className="font-medium text-gray-900">Audit Trail</p>
                          <p className="text-sm text-gray-500">Complete audit log of all KYC activities and changes</p>
                        </div>
                      </div>
                      <button className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors duration-200">
                        <Download size={16} className="mr-2" />
                        Download CSV
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Appearance Tab */}
          {activeTab === 'appearance' && (
            <div className="space-y-6">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 mb-4">Appearance & Preferences</h2>
                
                {/* Theme Selection */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between py-3 border-b border-gray-100">
                    <div className="flex items-center space-x-3">
                      <Monitor size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">Theme</p>
                        <p className="text-sm text-gray-500">Choose your preferred color scheme</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => handleSettingChange('appearance', 'theme', 'light')}
                        className={`p-2 rounded-lg border transition-colors duration-200 ${
                          settings.appearance.theme === 'light'
                            ? 'bg-blue-50 border-blue-300 text-blue-700'
                            : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
                        }`}
                      >
                        <Sun size={16} />
                      </button>
                      <button
                        onClick={() => handleSettingChange('appearance', 'theme', 'dark')}
                        className={`p-2 rounded-lg border transition-colors duration-200 ${
                          settings.appearance.theme === 'dark'
                            ? 'bg-blue-50 border-blue-300 text-blue-700'
                            : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
                        }`}
                      >
                        <Moon size={16} />
                      </button>
                    </div>
                  </div>

                  <div className="flex items-center justify-between py-3 border-b border-gray-100">
                    <div className="flex items-center space-x-3">
                      <Palette size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">Compact Mode</p>
                        <p className="text-sm text-gray-500">Reduce spacing for more content</p>
                      </div>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.appearance.compactMode}
                        onChange={(e) => handleSettingChange('appearance', 'compactMode', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between py-3 border-b border-gray-100">
                    <div className="flex items-center space-x-3">
                      <Globe size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">Language</p>
                        <p className="text-sm text-gray-500">Select your preferred language</p>
                      </div>
                    </div>
                    <select
                      value={settings.appearance.language}
                      onChange={(e) => handleSettingChange('appearance', 'language', e.target.value)}
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="en">English</option>
                      <option value="es">Spanish</option>
                      <option value="fr">French</option>
                      <option value="de">German</option>
                      <option value="zh">Chinese</option>
                    </select>
                  </div>

                  <div className="flex items-center justify-between py-3 border-b border-gray-100">
                    <div className="flex items-center space-x-3">
                      <Calendar size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">Date Format</p>
                        <p className="text-sm text-gray-500">How dates are displayed</p>
                      </div>
                    </div>
                    <select
                      value={settings.appearance.dateFormat}
                      onChange={(e) => handleSettingChange('appearance', 'dateFormat', e.target.value)}
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="MM/DD/YYYY">MM/DD/YYYY</option>
                      <option value="DD/MM/YYYY">DD/MM/YYYY</option>
                      <option value="YYYY-MM-DD">YYYY-MM-DD</option>
                    </select>
                  </div>

                  <div className="flex items-center justify-between py-3">
                    <div className="flex items-center space-x-3">
                      <Monitor size={16} className="text-gray-500" />
                      <div>
                        <p className="font-medium text-gray-900">Animations</p>
                        <p className="text-sm text-gray-500">Enable smooth animations and transitions</p>
                      </div>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.appearance.animationsEnabled}
                        onChange={(e) => handleSettingChange('appearance', 'animationsEnabled', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default UserSettings;
