import React, { useState, useEffect } from 'react';\r\nimport { smartFetch } from '../../utils/apiClient';\r\nimport {\r\n  LineChart, Line, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, \r\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\r\n  ComposedChart, Scatter, ScatterChart, ZAxis, RadarChart, PolarGrid,\r\n  PolarAngleAxis, PolarRadiusAxis, Radar, Treemap\r\n} from 'recharts';\r\nimport {\r\n  FaUsers, FaChartLine, FaGlobeAmericas, FaUserCheck, FaUserTimes,\r\n  FaCalendarAlt, FaFilter, FaDownload, FaEye, FaWallet, FaCoins,\r\n  FaShieldAlt, FaExclamationTriangle, FaClock, FaArrowUp, FaArrowDown,\r\n  FaSearch, FaUserTag, FaEnvelope, FaPhone, FaMapMarkerAlt, FaHistory,\r\n  FaBell, FaTrophy, FaFire, FaStar, FaRocket, FaTargetAlt, FaLightbulb,\r\n  FaBrain, FaChartArea, FaLayerGroup, FaBolt, FaWaveSquare, FaAtom,\r\n  FaSync, FaPlay, FaPause, FaExpandAlt, FaCompressAlt, FaCog, FaSlidersH\r\n} from 'react-icons/fa';\r\n\r\nconst COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4', '#F97316', '#84CC16'];\r\n\r\nconst EnhancedUserAnalyticsDashboard = () => {\r\n  const [analytics, setAnalytics] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [selectedTimeRange, setSelectedTimeRange] = useState('30d');\r\n  const [selectedMetric, setSelectedMetric] = useState('registrations');\r\n  const [userSegment, setUserSegment] = useState('all');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [userBehaviorData, setUserBehaviorData] = useState([]);\r\n  const [realTimeData, setRealTimeData] = useState(null);\r\n  const [isRealTimeActive, setIsRealTimeActive] = useState(false);\r\n  const [alertsCount, setAlertsCount] = useState(0);\r\n  const [viewMode, setViewMode] = useState('dashboard'); // dashboard, insights, predictions\r\n  const [predictiveData, setPredictiveData] = useState(null);\r\n\r\n  const timeRanges = [\r\n    { value: '1h', label: 'Last Hour' },\r\n    { value: '24h', label: 'Last 24 Hours' },\r\n    { value: '7d', label: 'Last 7 Days' },\r\n    { value: '30d', label: 'Last 30 Days' },\r\n    { value: '90d', label: 'Last 90 Days' },\r\n    { value: '1y', label: 'Last Year' },\r\n    { value: 'all', label: 'All Time' }\r\n  ];\r\n\r\n  const userSegments = [\r\n    { value: 'all', label: 'All Users', icon: FaUsers },\r\n    { value: 'active', label: 'Active Users', icon: FaUserCheck },\r\n    { value: 'verified', label: 'Verified Users', icon: FaShieldAlt },\r\n    { value: 'high_value', label: 'High Value Users', icon: FaTrophy },\r\n    { value: 'power_users', label: 'Power Users', icon: FaFire },\r\n    { value: 'at_risk', label: 'At Risk Users', icon: FaExclamationTriangle },\r\n    { value: 'new_users', label: 'New Users', icon: FaStar },\r\n    { value: 'inactive', label: 'Inactive Users', icon: FaUserTimes }\r\n  ];\r\n\r\n  const metrics = [\r\n    { value: 'registrations', label: 'New Registrations', icon: FaUsers },\r\n    { value: 'activity', label: 'User Activity', icon: FaChartLine },\r\n    { value: 'engagement', label: 'Engagement Rate', icon: FaEye },\r\n    { value: 'retention', label: 'User Retention', icon: FaUserCheck },\r\n    { value: 'wallets', label: 'Wallet Activity', icon: FaWallet },\r\n    { value: 'tokens', label: 'Token Holdings', icon: FaCoins },\r\n    { value: 'transactions', label: 'Transaction Volume', icon: FaBolt },\r\n    { value: 'revenue', label: 'Revenue per User', icon: FaRocket }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    fetchAnalytics();\r\n    if (isRealTimeActive) {\r\n      const interval = setInterval(fetchRealTimeData, 30000); // Every 30 seconds\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [selectedTimeRange, selectedMetric, userSegment, isRealTimeActive]);\r\n\r\n  useEffect(() => {\r\n    if (viewMode === 'predictions') {\r\n      fetchPredictiveAnalytics();\r\n    }\r\n  }, [viewMode]);\r\n\r\n  const fetchAnalytics = async () => {\r\n    const token = localStorage.getItem('access_token');\r\n    setLoading(true);\r\n    try {\r\n      const response = await smartFetch('/api/admin/analytics/users/enhanced', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          timeRange: selectedTimeRange,\r\n          metric: selectedMetric,\r\n          segment: userSegment,\r\n          filters: {\r\n            search: searchTerm\r\n          }\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!response.ok) throw new Error(data.msg || 'Failed to fetch analytics');\r\n\r\n      setAnalytics(data);\r\n      setAlertsCount(data.alerts?.length || 0);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRealTimeData = async () => {\r\n    const token = localStorage.getItem('access_token');\r\n    try {\r\n      const response = await smartFetch('/api/admin/analytics/realtime', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setRealTimeData(data);\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to fetch real-time data:', err);\r\n    }\r\n  };\r\n\r\n  const fetchPredictiveAnalytics = async () => {\r\n    const token = localStorage.getItem('access_token');\r\n    try {\r\n      const response = await smartFetch('/api/admin/analytics/predictions', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setPredictiveData(data);\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to fetch predictive analytics:', err);\r\n    }\r\n  };\r\n\r\n  const fetchUserBehavior = async (userId) => {\r\n    const token = localStorage.getItem('access_token');\r\n    try {\r\n      const response = await smartFetch(`/api/admin/analytics/user-behavior/${userId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setUserBehaviorData(data.behaviorData);\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to fetch user behavior:', err);\r\n    }\r\n  };\r\n\r\n  const exportAnalytics = async (format = 'csv') => {\r\n    const token = localStorage.getItem('access_token');\r\n    try {\r\n      const response = await smartFetch('/api/admin/analytics/export', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          timeRange: selectedTimeRange,\r\n          metric: selectedMetric,\r\n          segment: userSegment,\r\n          format: format\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const blob = await response.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.download = `user_analytics_${selectedTimeRange}_${Date.now()}.${format}`;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n      }\r\n    } catch (err) {\r\n      console.error('Export failed:', err);\r\n    }\r\n  };\r\n\r\n  // Enhanced Components\r\n  const AdvancedMetricCard = ({ title, value, change, icon: Icon, color = 'blue', trend, prediction, alert }) => (\r\n    <div className={`bg-white p-6 rounded-xl shadow-sm border relative overflow-hidden`}>\r\n      {alert && (\r\n        <div className=\"absolute top-2 right-2 w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\r\n      )}\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <div>\r\n          <p className=\"text-gray-600 text-sm font-medium\">{title}</p>\r\n          <p className=\"text-3xl font-bold text-gray-900 mt-1\">{value}</p>\r\n          {change && (\r\n            <div className={`flex items-center mt-2 text-sm ${\r\n              change > 0 ? 'text-green-600' : 'text-red-600'\r\n            }`}>\r\n              {change > 0 ? <FaArrowUp className=\"mr-1\" /> : <FaArrowDown className=\"mr-1\" />}\r\n              {Math.abs(change)}% vs previous period\r\n            </div>\r\n          )}\r\n          {prediction && (\r\n            <div className=\"mt-2 text-xs text-blue-600\">\r\n              <FaBrain className=\"inline mr-1\" />\r\n              Predicted: {prediction}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className={`w-14 h-14 bg-${color}-100 rounded-lg flex items-center justify-center`}>\r\n          <Icon className={`text-${color}-600 text-2xl`} />\r\n        </div>\r\n      </div>\r\n      {trend && (\r\n        <div className=\"h-8\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <LineChart data={trend}>\r\n              <Line type=\"monotone\" dataKey=\"value\" stroke={`var(--color-${color}-500)`} strokeWidth={2} dot={false} />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const UserJourneyMap = ({ journeyData }) => (\r\n    <div className=\"bg-white p-6 rounded-xl shadow-sm border\">\r\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">üó∫Ô∏è User Journey Mapping</h3>\r\n      <div className=\"space-y-4\">\r\n        {journeyData?.map((step, index) => (\r\n          <div key={index} className=\"flex items-center space-x-4\">\r\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold ${\r\n              step.completion > 80 ? 'bg-green-500' : step.completion > 50 ? 'bg-yellow-500' : 'bg-red-500'\r\n            }`}>\r\n              {index + 1}\r\n            </div>\r\n            <div className=\"flex-1\">\r\n              <div className=\"flex justify-between items-center mb-1\">\r\n                <span className=\"font-medium\">{step.name}</span>\r\n                <span className=\"text-sm text-gray-600\">{step.completion}% completion</span>\r\n              </div>\r\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                <div \r\n                  className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                  style={{ width: `${step.completion}%` }}\r\n                ></div>\r\n              </div>\r\n              <div className=\"text-xs text-gray-500 mt-1\">\r\n                Avg. time: {step.avgTime} | Drop-off: {step.dropOff}%\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const CohortAnalysis = ({ cohortData }) => (\r\n    <div className=\"bg-white p-6 rounded-xl shadow-sm border\">\r\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">üìä Cohort Retention Analysis</h3>\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"min-w-full\">\r\n          <thead>\r\n            <tr className=\"border-b\">\r\n              <th className=\"text-left py-2 px-3 text-sm font-medium text-gray-600\">Cohort</th>\r\n              <th className=\"text-center py-2 px-3 text-sm font-medium text-gray-600\">Size</th>\r\n              {[...Array(12)].map((_, i) => (\r\n                <th key={i} className=\"text-center py-2 px-3 text-sm font-medium text-gray-600\">M{i}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {cohortData?.map((cohort, index) => (\r\n              <tr key={index} className=\"border-b hover:bg-gray-50\">\r\n                <td className=\"py-2 px-3 text-sm font-medium\">{cohort.month}</td>\r\n                <td className=\"py-2 px-3 text-sm text-center\">{cohort.size}</td>\r\n                {cohort.retention.map((rate, monthIndex) => (\r\n                  <td key={monthIndex} className=\"py-2 px-3 text-center\">\r\n                    <span className={`inline-block w-full py-1 px-2 rounded text-xs font-medium ${\r\n                      rate > 50 ? 'bg-green-100 text-green-800' :\r\n                      rate > 25 ? 'bg-yellow-100 text-yellow-800' :\r\n                      'bg-red-100 text-red-800'\r\n                    }`}>\r\n                      {rate}%\r\n                    </span>\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const RealTimeMonitor = () => (\r\n    <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 p-6 rounded-xl text-white\">\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h3 className=\"text-lg font-semibold\">‚ö° Real-Time Monitor</h3>\r\n        <button\r\n          onClick={() => setIsRealTimeActive(!isRealTimeActive)}\r\n          className={`px-3 py-1 rounded-full text-sm font-medium ${\r\n            isRealTimeActive ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'\r\n          } transition-colors`}\r\n        >\r\n          {isRealTimeActive ? <><FaPause className=\"inline mr-1\" />Stop</> : <><FaPlay className=\"inline mr-1\" />Start</>}\r\n        </button>\r\n      </div>\r\n      {realTimeData && (\r\n        <div className=\"grid grid-cols-4 gap-4\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold\">{realTimeData.activeNow}</div>\r\n            <div className=\"text-sm opacity-80\">Active Now</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold\">{realTimeData.registrationsToday}</div>\r\n            <div className=\"text-sm opacity-80\">Today's Signups</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold\">{realTimeData.transactionsHour}</div>\r\n            <div className=\"text-sm opacity-80\">Transactions/Hr</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold\">${realTimeData.revenueToday}</div>\r\n            <div className=\"text-sm opacity-80\">Today's Revenue</div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const AlertsPanel = ({ alerts }) => (\r\n    <div className=\"bg-white p-6 rounded-xl shadow-sm border\">\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900\">üö® Smart Alerts</h3>\r\n        {alertsCount > 0 && (\r\n          <span className=\"bg-red-100 text-red-800 px-2 py-1 rounded-full text-sm font-medium\">\r\n            {alertsCount} active\r\n          </span>\r\n        )}\r\n      </div>\r\n      <div className=\"space-y-3\">\r\n        {alerts?.map((alert, index) => (\r\n          <div key={index} className={`p-3 rounded-lg border-l-4 ${\r\n            alert.severity === 'high' ? 'border-red-500 bg-red-50' :\r\n            alert.severity === 'medium' ? 'border-yellow-500 bg-yellow-50' :\r\n            'border-blue-500 bg-blue-50'\r\n          }`}>\r\n            <div className=\"flex justify-between items-start\">\r\n              <div>\r\n                <h4 className=\"font-medium text-gray-900\">{alert.title}</h4>\r\n                <p className=\"text-sm text-gray-600 mt-1\">{alert.description}</p>\r\n              </div>\r\n              <span className=\"text-xs text-gray-500\">{alert.time}</span>\r\n            </div>\r\n          </div>\r\n        )) || (\r\n          <div className=\"text-center text-gray-500 py-4\">\r\n            <FaBell className=\"mx-auto text-2xl mb-2 opacity-50\" />\r\n            <p>No alerts at this time</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const PredictiveInsights = () => (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"bg-gradient-to-r from-purple-500 to-pink-600 p-6 rounded-xl text-white\">\r\n        <h3 className=\"text-xl font-semibold mb-4\">üîÆ Predictive Analytics</h3>\r\n        <div className=\"grid grid-cols-3 gap-4\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold\">{predictiveData?.userGrowthForecast || '+24%'}</div>\r\n            <div className=\"text-sm opacity-80\">Growth Forecast (30d)</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold\">{predictiveData?.churnRisk || '12%'}</div>\r\n            <div className=\"text-sm opacity-80\">Churn Risk</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl font-bold\">{predictiveData?.revenueProjection || '$89K'}</div>\r\n            <div className=\"text-sm opacity-80\">Revenue Projection</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {predictiveData && (\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          <div className=\"bg-white p-6 rounded-xl shadow-sm border\">\r\n            <h4 className=\"font-semibold mb-4\">üìà Growth Prediction Model</h4>\r\n            <ResponsiveContainer width=\"100%\" height={250}>\r\n              <ComposedChart data={predictiveData.growthPrediction}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"month\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Bar dataKey=\"actual\" fill=\"#3B82F6\" name=\"Actual\" />\r\n                <Line type=\"monotone\" dataKey=\"predicted\" stroke=\"#EF4444\" strokeDasharray=\"5 5\" name=\"Predicted\" />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n\r\n          <div className=\"bg-white p-6 rounded-xl shadow-sm border\">\r\n            <h4 className=\"font-semibold mb-4\">üéØ Churn Risk Analysis</h4>\r\n            <ResponsiveContainer width=\"100%\" height={250}>\r\n              <ScatterChart data={predictiveData.churnAnalysis}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"engagement\" name=\"Engagement Score\" />\r\n                <YAxis dataKey=\"tenure\" name=\"Tenure (days)\" />\r\n                <ZAxis dataKey=\"risk\" range={[50, 400]} name=\"Risk Score\" />\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Scatter fill=\"#F59E0B\" />\r\n              </ScatterChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n        <div className=\"flex items-center\">\r\n          <FaExclamationTriangle className=\"text-red-600 mr-2\" />\r\n          <span className=\"text-red-800\">{error}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Enhanced Header */}\r\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\r\n        <div>\r\n          <h2 className=\"text-3xl font-bold text-gray-900 flex items-center\">\r\n            <FaChartArea className=\"mr-3 text-blue-600\" />\r\n            Advanced User Analytics\r\n          </h2>\r\n          <p className=\"text-gray-600 mt-1\">AI-powered insights and predictive analytics for user behavior</p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-3\">\r\n          {/* View Mode Switcher */}\r\n          <div className=\"flex bg-gray-100 rounded-lg p-1\">\r\n            {['dashboard', 'insights', 'predictions'].map((mode) => (\r\n              <button\r\n                key={mode}\r\n                onClick={() => setViewMode(mode)}\r\n                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\r\n                  viewMode === mode \r\n                    ? 'bg-white text-blue-600 shadow-sm' \r\n                    : 'text-gray-600 hover:text-gray-900'\r\n                }`}\r\n              >\r\n                {mode === 'dashboard' && <FaChartLine className=\"inline mr-1\" />}\r\n                {mode === 'insights' && <FaLightbulb className=\"inline mr-1\" />}\r\n                {mode === 'predictions' && <FaBrain className=\"inline mr-1\" />}\r\n                {mode.charAt(0).toUpperCase() + mode.slice(1)}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          \r\n          <button\r\n            onClick={() => exportAnalytics('pdf')}\r\n            className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center space-x-2\"\r\n          >\r\n            <FaDownload />\r\n            <span>Export PDF</span>\r\n          </button>\r\n          <button\r\n            onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\r\n            className=\"px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center space-x-2\"\r\n          >\r\n            <FaSlidersH />\r\n            <span>Advanced</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Real-Time Monitor */}\r\n      <RealTimeMonitor />\r\n\r\n      {/* Enhanced Filters */}\r\n      <div className=\"bg-white p-6 rounded-xl border shadow-sm space-y-4\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Time Range</label>\r\n            <select\r\n              value={selectedTimeRange}\r\n              onChange={(e) => setSelectedTimeRange(e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n            >\r\n              {timeRanges.map(range => (\r\n                <option key={range.value} value={range.value}>{range.label}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Metric</label>\r\n            <select\r\n              value={selectedMetric}\r\n              onChange={(e) => setSelectedMetric(e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n            >\r\n              {metrics.map(metric => (\r\n                <option key={metric.value} value={metric.value}>{metric.label}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">User Segment</label>\r\n            <select\r\n              value={userSegment}\r\n              onChange={(e) => setUserSegment(e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n            >\r\n              {userSegments.map(segment => (\r\n                <option key={segment.value} value={segment.value}>{segment.label}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Search</label>\r\n            <div className=\"relative\">\r\n              <FaSearch className=\"absolute left-3 top-3 text-gray-400\" />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Search users...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Content based on view mode */}\r\n      {viewMode === 'dashboard' && analytics && (\r\n        <>\r\n          {/* Enhanced Key Metrics */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n            <AdvancedMetricCard\r\n              title=\"Total Users\"\r\n              value={analytics.totalUsers?.toLocaleString()}\r\n              change={analytics.userGrowth}\r\n              icon={FaUsers}\r\n              color=\"blue\"\r\n              trend={analytics.userTrend}\r\n              prediction={analytics.userPrediction}\r\n            />\r\n            <AdvancedMetricCard\r\n              title=\"Active Users\"\r\n              value={analytics.activeUsers?.toLocaleString()}\r\n              change={analytics.activityChange}\r\n              icon={FaFire}\r\n              color=\"green\"\r\n              trend={analytics.activityTrend}\r\n              alert={analytics.activityAlert}\r\n            />\r\n            <AdvancedMetricCard\r\n              title=\"Revenue per User\"\r\n              value={`$${analytics.revenuePerUser || '127.50'}`}\r\n              change={analytics.revenueChange}\r\n              icon={FaRocket}\r\n              color=\"purple\"\r\n              trend={analytics.revenueTrend}\r\n            />\r\n            <AdvancedMetricCard\r\n              title=\"Engagement Score\"\r\n              value={`${analytics.engagementScore || '8.4'}/10`}\r\n              change={analytics.engagementChange}\r\n              icon={FaTargetAlt}\r\n              color=\"yellow\"\r\n              trend={analytics.engagementTrend}\r\n            />\r\n          </div>\r\n\r\n          {/* Alerts Panel */}\r\n          <AlertsPanel alerts={analytics.alerts} />\r\n\r\n          {/* Advanced Charts */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Enhanced User Journey */}\r\n            <UserJourneyMap journeyData={analytics.userJourney} />\r\n            \r\n            {/* User Behavior Heatmap */}\r\n            <div className=\"bg-white p-6 rounded-xl shadow-sm border\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">üî• Activity Heatmap</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <Treemap\r\n                  data={analytics.activityHeatmap}\r\n                  dataKey=\"value\"\r\n                  aspectRatio={4/3}\r\n                  stroke=\"#fff\"\r\n                  fill=\"#3B82F6\"\r\n                />\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Cohort Analysis */}\r\n          <CohortAnalysis cohortData={analytics.cohortData} />\r\n        </>\r\n      )}\r\n\r\n      {viewMode === 'insights' && analytics && (\r\n        <div className=\"space-y-6\">\r\n          {/* AI-Generated Insights */}\r\n          <div className=\"bg-gradient-to-r from-green-500 to-teal-600 p-6 rounded-xl text-white\">\r\n            <h3 className=\"text-xl font-semibold mb-4\">üß† AI-Powered Insights</h3>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              {analytics.aiInsights?.map((insight, index) => (\r\n                <div key={index} className=\"bg-white/10 backdrop-blur rounded-lg p-4\">\r\n                  <div className=\"flex items-center mb-2\">\r\n                    <FaLightbulb className=\"mr-2\" />\r\n                    <span className=\"font-medium\">{insight.title}</span>\r\n                  </div>\r\n                  <p className=\"text-sm opacity-90\">{insight.description}</p>\r\n                  <div className=\"mt-2 text-xs opacity-75\">Confidence: {insight.confidence}%</div>\r\n                </div>\r\n              )) || (\r\n                <div className=\"col-span-3 text-center py-8\">\r\n                  <FaBrain className=\"mx-auto text-4xl mb-4 opacity-50\" />\r\n                  <p>AI insights are being generated...</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Advanced Analytics Charts */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <div className=\"bg-white p-6 rounded-xl shadow-sm border\">\r\n              <h4 className=\"font-semibold mb-4\">üìä User Lifecycle Analysis</h4>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <RadarChart data={analytics.lifecycleData}>\r\n                  <PolarGrid />\r\n                  <PolarAngleAxis dataKey=\"stage\" />\r\n                  <PolarRadiusAxis angle={30} domain={[0, 100]} />\r\n                  <Radar dataKey=\"score\" stroke=\"#3B82F6\" fill=\"#3B82F6\" fillOpacity={0.3} />\r\n                  <Tooltip />\r\n                </RadarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n\r\n            <div className=\"bg-white p-6 rounded-xl shadow-sm border\">\r\n              <h4 className=\"font-semibold mb-4\">üéØ Conversion Funnel</h4>\r\n              <div className=\"space-y-3\">\r\n                {analytics.conversionFunnel?.map((step, index) => (\r\n                  <div key={index} className=\"relative\">\r\n                    <div className=\"flex justify-between items-center mb-1\">\r\n                      <span className=\"font-medium\">{step.stage}</span>\r\n                      <span className=\"text-sm text-gray-600\">{step.users} users ({step.rate}%)</span>\r\n                    </div>\r\n                    <div className=\"w-full bg-gray-200 rounded-full h-3\">\r\n                      <div \r\n                        className=\"bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full transition-all duration-500\"\r\n                        style={{ width: `${step.rate}%` }}\r\n                      ></div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {viewMode === 'predictions' && (\r\n        <PredictiveInsights />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnhancedUserAnalyticsDashboard;\r\n
